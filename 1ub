-- SyniXLib.lua v0.4.5
-- - Sidebar, Toggle, Button, Dropdown
-- - Launcher (mobile) arrastável
-- - SINGLE window (sem duplicar). X fecha tudo (janela + launcher + dock)
-- - Minimize com animação para DOCK flutuante (PC)
-- - NOVO: Ícone de Config (engrenagem) no header, painel de configurações:
--         • Hotkey para minimizar/restaurar (default P)
--         • Créditos e botões para copiar links
--         • Fechar painel

print("[SyniXLib] loaded v0.4.5")

if _G.__SyniXSingleton then return _G.__SyniXSingleton end

local Players = game:GetService("Players")
local UIS     = game:GetService("UserInputService")
local Tween   = game:GetService("TweenService")

local Lib = {}
Lib.__index = Lib

-- ===== Estado =====
Lib._launcherGui     = nil
Lib._launcherBtn     = nil
Lib._launcherEnabled = true
Lib._dockBtn         = nil
Lib._currentGui      = nil
Lib._currentWinObj   = nil
Lib._lastOpts        = nil
Lib._openWindows     = {}

-- ===== Comportamento =====
Lib._singleMode   = true
Lib._launcherSnap = false

-- Hotkey global (pode sobrescrever antes de criar a janela)
local HOTKEY = _G.SyniXMinKey or Enum.KeyCode.P

-- ===== Tema =====
local DEFAULT_THEME = {
    bg_window   = Color3.fromRGB(14,15,20),
    bg_header   = Color3.fromRGB(20,21,28),
    bg_panel    = Color3.fromRGB(18,19,26),
    bg_sidebar  = Color3.fromRGB(16,17,24),
    card        = Color3.fromRGB(24,25,34),
    row         = Color3.fromRGB(28,30,40),
    stroke      = Color3.fromRGB(255,255,255),
    text        = Color3.fromRGB(238,240,248),
    text_muted  = Color3.fromRGB(200,205,220),
    toggle_on   = Color3.fromRGB(245,245,245),
    toggle_off  = Color3.fromRGB(60,62,70),
    knob_on     = Color3.fromRGB(22,24,32),
    knob_off    = Color3.fromRGB(235,238,245),

    sidebarWidth = 176,
    rowHeight    = 48,
    toggleSize   = Vector2.new(84,30),
    knobSize     = Vector2.new(26,26),

    sideIconSize = 28,
    winSize      = UDim2.fromOffset(680,400),
}

-- ===== Utils =====
local function merge(a,b)
    local t = {}
    for k,v in pairs(a or {}) do t[k]=v end
    for k,v in pairs(b or {}) do t[k]=v end
    return t
end

local function copyToClipboard(text)
    local ok = pcall(function() setclipboard(tostring(text)) end)
    return ok
end

local function enableDrag(frame, clampToScreen)
    frame.Active = true
    local dragging, startPos, startMouse
    local function mousePos()
        local m = UIS:GetMouseLocation()
        return Vector2.new(m.X, m.Y)
    end
    frame.InputBegan:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then
            dragging, startPos, startMouse = true, frame.AbsolutePosition, mousePos()
            i.Changed:Connect(function()
                if i.UserInputState==Enum.UserInputState.End then dragging=false end
            end)
        end
    end)
    UIS.InputChanged:Connect(function(i)
        if not dragging then return end
        if i.UserInputType~=Enum.UserInputType.MouseMovement and i.UserInputType~=Enum.UserInputType.Touch then return end
        local delta = mousePos() - startMouse
        local pos   = startPos + delta
        if clampToScreen and frame.Parent then
            pos = Vector2.new(
                math.clamp(pos.X, 0, math.max(0, frame.Parent.AbsoluteSize.X - frame.AbsoluteSize.X)),
                math.clamp(pos.Y, 0, math.max(0, frame.Parent.AbsoluteSize.Y - frame.AbsoluteSize.Y))
            )
        end
        frame.Position = UDim2.fromOffset(pos.X, pos.Y)
    end)
end

local function enableFloatingDrag(btn, saveKey)
    btn.Active = true
    local dragging = false
    local function getMouse()
        local m = UIS:GetMouseLocation()
        return Vector2.new(m.X, m.Y)
    end
    btn.InputBegan:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then
            dragging = true
            i.Changed:Connect(function()
                if i.UserInputState==Enum.UserInputState.End then
                    dragging = false
                    if saveKey then _G[saveKey] = btn.Position end
                end
            end)
        end
    end)
    UIS.InputChanged:Connect(function(i)
        if not dragging then return end
        if i.UserInputType~=Enum.UserInputType.MouseMovement and i.UserInputType~=Enum.UserInputType.Touch then return end
        local m = getMouse()
        local w,h = btn.AbsoluteSize.X, btn.AbsoluteSize.Y
        local px, py = m.X - w/2, m.Y - h/2
        if btn.Parent then
            local sz = btn.Parent.AbsoluteSize
            px = math.clamp(px, 0, math.max(0, sz.X - w))
            py = math.clamp(py, 0, math.max(0, sz.Y - h))
        end
        btn.Position = UDim2.fromOffset(px, py)
    end)
end

-- ===== Launcher =====
local function ensureLauncher()
    if not Lib._launcherEnabled then return end
    if Lib._launcherBtn and Lib._launcherBtn.Parent then return end

    local player = Players.LocalPlayer
    local gui = Lib._launcherGui
    if not gui or not gui.Parent then
        gui = Instance.new("ScreenGui")
        gui.Name = "SyniX_LauncherRoot"
        gui.IgnoreGuiInset, gui.ResetOnSpawn = true, false
        gui.DisplayOrder = 1000
        gui.Parent = player:WaitForChild("PlayerGui")
        Lib._launcherGui = gui
    end

    local launcher = Instance.new("ImageButton")
    launcher.Name = "Launcher"
    launcher.Image = "rbxassetid://14862323455"
    launcher.Size = UDim2.fromOffset(56,56)
    launcher.Position = _G.SyniXLauncherPos or UDim2.new(0, 14, 1, -72)
    launcher.BackgroundColor3 = Color3.fromRGB(26,28,36)
    launcher.BorderSizePixel = 0
    launcher.AutoButtonColor = true
    launcher.ZIndex = 1001
    Instance.new("UICorner", launcher).CornerRadius = UDim.new(1,0)
    local s = Instance.new("UIStroke", launcher); s.Transparency = 0.45; s.Color = Color3.fromRGB(255,255,255)
    launcher.Parent = gui

    enableFloatingDrag(launcher, "SyniXLauncherPos")

    launcher.MouseButton1Click:Connect(function()
        if Lib._currentGui and Lib._currentGui.Parent then
            Lib._currentGui.Enabled = not Lib._currentGui.Enabled
        elseif Lib._lastOpts then
            Lib:_spawnWindow(Lib._lastOpts)
        end
    end)

    Lib._launcherBtn = launcher
end

local function destroyLauncher()
    if Lib._launcherBtn then
        if Lib._launcherBtn.Parent then Lib._launcherBtn:Destroy() end
        Lib._launcherBtn = nil
    end
    if Lib._launcherGui then
        if Lib._launcherGui.Parent then Lib._launcherGui:Destroy() end
        Lib._launcherGui = nil
    end
end

-- ===== Dock =====
local function ensureDock(parentGui)
    if Lib._dockBtn and Lib._dockBtn.Parent then return Lib._dockBtn end
    local dock = Instance.new("TextButton")
    dock.Name = "SyniX_Dock"
    dock.Text = "SyniX Hub"
    dock.Font = Enum.Font.GothamBold
    dock.TextScaled = true
    dock.TextColor3 = Color3.fromRGB(235,238,245)
    dock.BackgroundColor3 = Color3.fromRGB(30,32,44)
    dock.Size = UDim2.fromOffset(160, 44)
    dock.Position = _G.SyniXDockPos or UDim2.new(0, 14, 1, -60)
    dock.Visible = false
    dock.ZIndex = 1002
    Instance.new("UICorner", dock).CornerRadius = UDim.new(1,0)
    local s = Instance.new("UIStroke", dock); s.Transparency = 0.4; s.Color = Color3.fromRGB(255,255,255)
    dock.Parent = parentGui
    enableFloatingDrag(dock, "SyniXDockPos")
    Lib._dockBtn = dock
    return dock
end

local function destroyDock()
    if Lib._dockBtn then
        if Lib._dockBtn.Parent then Lib._dockBtn:Destroy() end
        Lib._dockBtn = nil
    end
end

-- ===== Construção da janela =====
function Lib:_spawnWindow(opts)
    opts = opts or {}
    if Lib._singleMode then opts.multi = false end

    local player = Players.LocalPlayer
    local theme = merge(DEFAULT_THEME, (opts and opts.theme) or {})
    if opts and opts.size then theme.winSize = opts.size end

    -- reusa janela no modo single
    if not (opts and opts.multi) then
        if Lib._currentGui and Lib._currentGui.Parent then
            Lib._currentGui.Enabled = true
            return Lib._currentWinObj
        end
    end

    local gui = Instance.new("ScreenGui")
    gui.Name = "SyniX_Window"
    gui.IgnoreGuiInset, gui.ResetOnSpawn = true, false
    gui.DisplayOrder = 900
    gui.Parent = player:WaitForChild("PlayerGui")

    local dock = ensureDock(gui)

    local win = Instance.new("Frame")
    win.Name = "Window"
    win.Size = theme.winSize
    win.BackgroundColor3 = theme.bg_window
    Instance.new("UICorner", win).CornerRadius = UDim.new(0,14)
    local wS = Instance.new("UIStroke", win); wS.Color=theme.stroke; wS.Transparency=0.15
    win.Parent = gui
    enableDrag(win, true)

    -- Header
    local header = Instance.new("Frame")
    header.Parent = win
    header.BackgroundColor3 = theme.bg_header
    header.Size = UDim2.new(1, -16, 0, 46)
    header.Position = UDim2.new(0, 8, 0, 8)
    header.BorderSizePixel = 0
    Instance.new("UICorner", header).CornerRadius = UDim.new(0,10)

    local hIcon = Instance.new("ImageLabel", header)
    hIcon.BackgroundTransparency = 1
    hIcon.Image = "rbxassetid://14862323455"
    hIcon.Size = UDim2.fromOffset(22,22)
    hIcon.Position = UDim2.new(0, 10, 0.5, -11)

    local hTitle = Instance.new("TextLabel", header)
    hTitle.BackgroundTransparency = 1
    hTitle.Text = (opts and opts.title) or "SyniX Hub | Free"
    hTitle.Font = Enum.Font.GothamBold
    hTitle.TextScaled = true
    hTitle.TextXAlignment = Enum.TextXAlignment.Left
    hTitle.TextColor3 = theme.text
    hTitle.Position = UDim2.new(0, 40, 0, 4)
    hTitle.Size = UDim2.new(1, -190, 1, -8)
    Instance.new("UITextSizeConstraint", hTitle).MaxTextSize = 20

    local function mkHeadBtn(txt)
        local b = Instance.new("TextButton")
        b.BackgroundColor3 = theme.card
        b.Text = txt
        b.TextScaled = true
        b.Font = Enum.Font.GothamBold
        b.TextColor3 = theme.text
        b.AutoButtonColor = true
        Instance.new("UICorner", b).CornerRadius = UDim.new(0,8)
        return b
    end

    -- Ícone de Config (ao lado do "-")
    local btnCfg = Instance.new("ImageButton")
    btnCfg.BackgroundColor3 = theme.card
    btnCfg.Image = "rbxassetid://18702777518"
    btnCfg.Size = UDim2.fromOffset(32,26)
    btnCfg.Position = UDim2.new(1,-110,0.5,-13)
    btnCfg.Parent = header
    Instance.new("UICorner", btnCfg).CornerRadius = UDim.new(0,8)

    local btnMin = mkHeadBtn("-"); btnMin.Parent = header; btnMin.Size = UDim2.fromOffset(32,26); btnMin.Position = UDim2.new(1,-74,0.5,-13)
    local btnCls = mkHeadBtn("X"); btnCls.Parent = header; btnCls.Size = UDim2.fromOffset(32,26); btnCls.Position = UDim2.new(1,-38,0.5,-13)

    -- Painel de Configurações (oculto)
    local cfg = Instance.new("Frame")
    cfg.Name = "SettingsPanel"
    cfg.Size = UDim2.new(0, 360, 0, 220)
    cfg.Position = UDim2.new(0.5, -180, 0.5, -110)
    cfg.BackgroundColor3 = theme.bg_panel
    cfg.Visible = false
    cfg.Parent = win
    Instance.new("UICorner", cfg).CornerRadius = UDim.new(0,10)
    local cfgS = Instance.new("UIStroke", cfg); cfgS.Transparency = 0.6; cfgS.Color = theme.stroke
    enableDrag(cfg, true)

    local cfgTitle = Instance.new("TextLabel", cfg)
    cfgTitle.BackgroundTransparency = 1
    cfgTitle.Text = "Settings"
    cfgTitle.Font = Enum.Font.GothamBlack
    cfgTitle.TextScaled = true
    cfgTitle.TextColor3 = theme.text
    cfgTitle.Size = UDim2.new(1,-40,0,30)
    cfgTitle.Position = UDim2.new(0,12,0,8)
    Instance.new("UITextSizeConstraint", cfgTitle).MaxTextSize = 20

    local cfgClose = mkHeadBtn("X")
    cfgClose.Parent = cfg
    cfgClose.Size = UDim2.fromOffset(28,22)
    cfgClose.Position = UDim2.new(1,-34,0,10)

    -- linha Hotkey
    local hkLbl = Instance.new("TextLabel", cfg)
    hkLbl.BackgroundTransparency = 1
    hkLbl.Text = "Minimize Hotkey"
    hkLbl.Font = Enum.Font.GothamSemibold
    hkLbl.TextScaled = true
    hkLbl.TextXAlignment = Enum.TextXAlignment.Left
    hkLbl.TextColor3 = theme.text
    hkLbl.Size = UDim2.new(1,-24,0,24)
    hkLbl.Position = UDim2.new(0,12,0,48)
    Instance.new("UITextSizeConstraint", hkLbl).MaxTextSize = 16

    local hkValue = Instance.new("TextLabel", cfg)
    hkValue.BackgroundTransparency = 1
    hkValue.Font = Enum.Font.Gotham
    hkValue.TextScaled = true
    hkValue.TextColor3 = theme.text_muted
    hkValue.Size = UDim2.new(1,-24,0,22)
    hkValue.Position = UDim2.new(0,12,0,74)
    Instance.new("UITextSizeConstraint", hkValue).MaxTextSize = 14
    local function refreshHK()
        hkValue.Text = "Atual: ".. (HOTKEY and HOTKEY.Name or "Nenhum")
    end
    refreshHK()

    local hkBtn = mkHeadBtn("Definir tecla")
    hkBtn.Parent = cfg
    hkBtn.Size = UDim2.fromOffset(120,26)
    hkBtn.Position = UDim2.new(0,12,0,104)

    local hkClr = mkHeadBtn("Limpar")
    hkClr.Parent = cfg
    hkClr.Size = UDim2.fromOffset(88,26)
    hkClr.Position = UDim2.new(0,142,0,104)

    -- Créditos / Links
    local credit = Instance.new("TextLabel", cfg)
    credit.BackgroundTransparency = 1
    credit.Font = Enum.Font.Gotham
    credit.TextScaled = true
    credit.TextColor3 = theme.text_muted
    credit.Text = "SyniX Hub — Credits: You :)"
    credit.Size = UDim2.new(1,-24,0,22)
    credit.Position = UDim2.new(0,12,0,140)
    Instance.new("UITextSizeConstraint", credit).MaxTextSize = 14

    local btnDiscord = mkHeadBtn("Copiar Discord")
    btnDiscord.Parent = cfg
    btnDiscord.Size = UDim2.fromOffset(140,26)
    btnDiscord.Position = UDim2.new(0,12,0,170)

    local btnSite = mkHeadBtn("Copiar Site")
    btnSite.Parent = cfg
    btnSite.Size = UDim2.fromOffset(120,26)
    btnSite.Position = UDim2.new(0,160,0,170)

    -- Body
    local body = Instance.new("Frame", win)
    body.BackgroundTransparency = 1
    body.Position = UDim2.new(0, 6, 0, 60)
    body.Size = UDim2.new(1, -12, 1, -68)

    -- Sidebar
    local sidebar = Instance.new("ScrollingFrame", body)
    sidebar.Name = "Sidebar"
    sidebar.BackgroundColor3 = theme.bg_sidebar
    sidebar.Size = UDim2.new(0, theme.sidebarWidth, 1, 0)
    sidebar.Position = UDim2.new(0, 0, 0, 0)
    sidebar.ScrollBarThickness = 4
    sidebar.CanvasSize = UDim2.new(0,0,0,0)
    Instance.new("UICorner", sidebar).CornerRadius = UDim.new(0,10)
    local sbS = Instance.new("UIStroke", sidebar); sbS.Transparency = 0.85; sbS.Color = theme.stroke

    local sList = Instance.new("UIListLayout", sidebar)
    sList.Padding = UDim.new(0,4)
    sList.SortOrder = Enum.SortOrder.LayoutOrder
    sList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        sidebar.CanvasSize = UDim2.new(0,0,0, sList.AbsoluteContentSize.Y + 6)
    end)

    -- Content
    local content = Instance.new("Frame", body)
    content.BackgroundColor3 = theme.bg_panel
    content.Size = UDim2.new(1, -(theme.sidebarWidth+6), 1, 0)
    content.Position = UDim2.new(0, theme.sidebarWidth+6, 0, 0)
    Instance.new("UICorner", content).CornerRadius = UDim.new(0,10)
    local cS = Instance.new("UIStroke", content); cS.Transparency=0.85; cS.Color=theme.stroke

    local pageTitle = Instance.new("TextLabel", content)
    pageTitle.BackgroundTransparency = 1
    pageTitle.Text = "| Home"
    pageTitle.Font = Enum.Font.GothamBlack
    pageTitle.TextColor3 = theme.text
    pageTitle.TextScaled = true
    pageTitle.TextXAlignment = Enum.TextXAlignment.Left
    pageTitle.Position = UDim2.new(0, 10, 0, 8)
    pageTitle.Size = UDim2.new(1, -20, 0, 28)
    Instance.new("UITextSizeConstraint", pageTitle).MaxTextSize = 20

    -- ==== Lateral ====
    local function makeSideItem(iconId, text)
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(1, 0, 0, 38)
        btn.BackgroundColor3 = DEFAULT_THEME.card
        btn.AutoButtonColor = false
        btn.Text = ""
        Instance.new("UICorner", btn).CornerRadius = UDim.new(0,8)

        local ic = Instance.new("ImageLabel", btn)
        ic.BackgroundTransparency = 1
        ic.Image = iconId or "rbxassetid://14862323455"
        ic.Size = UDim2.fromOffset(DEFAULT_THEME.sideIconSize, DEFAULT_THEME.sideIconSize)
        ic.Position = UDim2.new(0, 8, 0.5, -math.floor(DEFAULT_THEME.sideIconSize/2))
        ic.ImageColor3 = Color3.fromRGB(230,230,235)

        local lb = Instance.new("TextLabel", btn)
        lb.BackgroundTransparency = 1
        lb.Text = text
        lb.Font = Enum.Font.GothamSemibold
        lb.TextXAlignment = Enum.TextXAlignment.Left
        lb.TextColor3 = DEFAULT_THEME.text
        lb.TextScaled = true
        lb.Position = UDim2.new(0, 8 + DEFAULT_THEME.sideIconSize + 8, 0, 4)
        lb.Size = UDim2.new(1, -(8 + DEFAULT_THEME.sideIconSize + 8 + 8), 1, -8)
        Instance.new("UITextSizeConstraint", lb).MaxTextSize = 16
        return btn
    end

    local function selectSide(sideBtn)
        for _,c in ipairs(sidebar:GetChildren()) do
            if c:IsA("TextButton") then
                Tween:Create(c, TweenInfo.new(0.15), {BackgroundColor3 = DEFAULT_THEME.card}):Play()
            end
        end
        Tween:Create(sideBtn, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(50,52,62)}):Play()
    end

    -- ===== Abas / Widgets =====
    local function MakeTab(def)
        local sideBtn = makeSideItem(def.icon, def.name or "Tab")
        sideBtn.Parent = sidebar

        local page = Instance.new("ScrollingFrame")
        page.BackgroundTransparency = 1
        page.Position = UDim2.new(0, 8, 0, 44)
        page.Size = UDim2.new(1, -16, 1, -54)
        page.ScrollBarThickness = 6
        page.Visible = false
        page.Parent = content
        local pageList = Instance.new("UIListLayout", page)
        pageList.Padding = UDim.new(0,8)
        pageList.SortOrder = Enum.SortOrder.LayoutOrder
        pageList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            page.CanvasSize = UDim2.new(0,0,0,pageList.AbsoluteContentSize.Y + 8)
        end)

        local function TAddSection(text)
            local s = Instance.new("TextLabel", page)
            s.BackgroundTransparency = 1
            s.Text = text
            s.Font = Enum.Font.GothamBold
            s.TextXAlignment = Enum.TextXAlignment.Left
            s.TextColor3 = DEFAULT_THEME.text
            s.TextScaled = true
            s.Size = UDim2.new(1,0,0,24)
            Instance.new("UITextSizeConstraint", s).MaxTextSize = 16
            return s
        end

        local function TAddToggle(iconId, labelText, default, callback)
            local row = Instance.new("Frame", page)
            row.Size = UDim2.new(1, 0, 0, DEFAULT_THEME.rowHeight)
            row.BackgroundColor3 = DEFAULT_THEME.row
            Instance.new("UICorner", row).CornerRadius = UDim.new(0, 8)

            local ico = Instance.new("ImageLabel", row)
            ico.BackgroundTransparency = 1
            ico.Image = iconId or "rbxassetid://14862323455"
            ico.Size = UDim2.fromOffset(18,18)
            ico.Position = UDim2.new(0, 12, 0.5, -9)
            ico.ImageColor3 = Color3.fromRGB(235,235,240)

            local label = Instance.new("TextLabel", row)
            label.BackgroundTransparency = 1
            label.Text = string.upper(labelText or "TOGGLE")
            label.Font = Enum.Font.GothamSemibold
            label.TextColor3 = DEFAULT_THEME.text
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.TextScaled = true
            label.Position = UDim2.new(0, 36, 0, 2)
            label.Size = UDim2.new(1, - (DEFAULT_THEME.toggleSize.X + 70), 1, -4)
            Instance.new("UITextSizeConstraint", label).MaxTextSize = 16

            local btn = Instance.new("TextButton", row)
            btn.Text = ""
            btn.AutoButtonColor = false
            btn.Size = UDim2.fromOffset(DEFAULT_THEME.toggleSize.X, DEFAULT_THEME.toggleSize.Y)
            btn.Position = UDim2.new(1, -(DEFAULT_THEME.toggleSize.X + 12), 0.5, -math.floor(DEFAULT_THEME.toggleSize.Y/2))
            btn.BackgroundColor3 = DEFAULT_THEME.toggle_off
            btn.ClipsDescendants = true
            Instance.new("UICorner", btn).CornerRadius = UDim.new(1,0)

            local knob = Instance.new("Frame", btn)
            knob.Size = UDim2.fromOffset(DEFAULT_THEME.knobSize.X, DEFAULT_THEME.knobSize.Y)
            knob.Position = UDim2.new(0, 2, 0.5, -math.floor(DEFAULT_THEME.knobSize.Y/2))
            knob.BackgroundColor3 = DEFAULT_THEME.knob_off
            Instance.new("UICorner", knob).CornerRadius = UDim.new(1,0)
            local kS = Instance.new("UIStroke", knob); kS.Transparency = 0.7; kS.Color = Color3.fromRGB(0,0,0)

            local offX = 2
            local onX  = math.max(2, DEFAULT_THEME.toggleSize.X - DEFAULT_THEME.knobSize.X - 2)

            local value = default and true or false
            local function paint(v)
                if v then
                    Tween:Create(btn,  TweenInfo.new(0.14, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = DEFAULT_THEME.toggle_on}):Play()
                    Tween:Create(knob, TweenInfo.new(0.14, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                        {Position = UDim2.new(0, onX, 0.5, -math.floor(DEFAULT_THEME.knobSize.Y/2)), BackgroundColor3 = DEFAULT_THEME.knob_on}):Play()
                else
                    Tween:Create(btn,  TweenInfo.new(0.14, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = DEFAULT_THEME.toggle_off}):Play()
                    Tween:Create(knob, TweenInfo.new(0.14, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                        {Position = UDim2.new(0, offX, 0.5, -math.floor(DEFAULT_THEME.knobSize.Y/2)), BackgroundColor3 = DEFAULT_THEME.knob_off}):Play()
                end
            end
            paint(value)

            btn.MouseButton1Click:Connect(function()
                value = not value
                paint(value)
                if callback then task.spawn(function() pcall(callback, value) end) end
            end)

            return { Set=function(v) value=v and true or false; paint(value); if callback then pcall(callback,value) end end,
                     Get=function() return value end }
        end

        local function TAddButton(iconId, text, callback)
            local row = Instance.new("TextButton", page)
            row.Text = ""
            row.Size = UDim2.new(1, 0, 0, 44)
            row.BackgroundColor3 = DEFAULT_THEME.card
            row.AutoButtonColor = true
            Instance.new("UICorner", row).CornerRadius = UDim.new(0,8)

            local ico = Instance.new("ImageLabel", row)
            ico.BackgroundTransparency = 1
            ico.Image = iconId or "rbxassetid://14862323455"
            ico.Size = UDim2.fromOffset(18,18)
            ico.Position = UDim2.new(0, 12, 0.5, -9)
            ico.ImageColor3 = Color3.fromRGB(235,235,240)

            local lbl = Instance.new("TextLabel", row)
            lbl.BackgroundTransparency = 1
            lbl.Text = text or "BUTTON"
            lbl.Font = Enum.Font.GothamBold
            lbl.TextColor3 = DEFAULT_THEME.text
            lbl.TextXAlignment = Enum.TextXAlignment.Left
            lbl.TextScaled = true
            lbl.Position = UDim2.new(0, 36, 0, 0)
            lbl.Size = UDim2.new(1, -36, 1, 0)
            Instance.new("UITextSizeConstraint", lbl).MaxTextSize = 16

            row.MouseButton1Click:Connect(function()
                if typeof(callback) == "function" then
                    task.spawn(function()
                        local ok, err = pcall(callback)
                        if not ok then warn("[SyniXLib][Button] Callback error:", err) end
                    end)
                end
            end)

            return { Instance=row, SetText=function(t) lbl.Text=t end, SetIcon=function(id) ico.Image=id end }
        end

        local function TAddDropdown(iconId, labelText, items, default, callback)
            items = items or {}
            local capH = DEFAULT_THEME.rowHeight
            local row = Instance.new("Frame", page)
            row.Size = UDim2.new(1, 0, 0, capH)
            row.BackgroundColor3 = DEFAULT_THEME.row
            row.ClipsDescendants = true
            Instance.new("UICorner", row).CornerRadius = UDim.new(0, 8)

            local cap = Instance.new("Frame", row)
            cap.BackgroundTransparency = 1
            cap.Size = UDim2.new(1, 0, 0, capH)
            cap.ZIndex = 2

            local ico = Instance.new("ImageLabel", cap)
            ico.BackgroundTransparency = 1
            ico.Image = iconId or "rbxassetid://14862323455"
            ico.Size = UDim2.fromOffset(18,18)
            ico.Position = UDim2.new(0, 12, 0.5, -9)
            ico.ImageColor3 = Color3.fromRGB(235,235,240)
            ico.ZIndex = 2

            local label = Instance.new("TextLabel", cap)
            label.BackgroundTransparency = 1
            label.Text = string.upper(labelText or "DROPDOWN")
            label.Font = Enum.Font.GothamSemibold
            label.TextColor3 = DEFAULT_THEME.text
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.TextScaled = true
            label.Position = UDim2.new(0, 36, 0, 2)
            label.Size = UDim2.new(1, -180, 1, -4)
            Instance.new("UITextSizeConstraint", label).MaxTextSize = 16
            label.ZIndex = 2

            local valueText = Instance.new("TextLabel", cap)
            valueText.BackgroundTransparency = 1
            valueText.Text = tostring(default or (items[1] or ""))
            valueText.Font = Enum.Font.Gotham
            valueText.TextColor3 = DEFAULT_THEME.text
            valueText.TextXAlignment = Enum.TextXAlignment.Right
            valueText.TextScaled = true
            valueText.Position = UDim2.new(0, 0, 0, 6)
            valueText.Size = UDim2.new(1, -56, 1, -12)
            Instance.new("UITextSizeConstraint", valueText).MaxTextSize = 14
            valueText.ZIndex = 2

            local chev = Instance.new("TextLabel", cap)
            chev.BackgroundTransparency = 1
            chev.Text = "▼"
            chev.Font = Enum.Font.GothamBold
            chev.TextColor3 = DEFAULT_THEME.text
            chev.TextScaled = true
            chev.Position = UDim2.new(1, -40, 0, 8)
            chev.Size = UDim2.fromOffset(28, 28)
            Instance.new("UITextSizeConstraint", chev).MaxTextSize = 16
            chev.ZIndex = 2

            local opts = Instance.new("ScrollingFrame", row)
            opts.BackgroundTransparency = 1
            opts.Position = UDim2.new(0, 8, 0, capH)
            opts.Size = UDim2.new(1, -16, 0, 0)
            opts.ScrollBarThickness = 6
            opts.ClipsDescendants = true
            opts.ZIndex = 1
            opts.CanvasSize = UDim2.new(0,0,0,0)

            local list = Instance.new("UIListLayout", opts)
            list.Padding = UDim.new(0,6)
            list.SortOrder = Enum.SortOrder.LayoutOrder
            list:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                opts.CanvasSize = UDim2.new(0,0,0,list.AbsoluteContentSize.Y)
            end)

            local function makeOption(txt)
                local b = Instance.new("TextButton")
                b.Text = ""
                b.AutoButtonColor = true
                b.Size = UDim2.new(1, 0, 0, 32)
                b.BackgroundColor3 = DEFAULT_THEME.card
                Instance.new("UICorner", b).CornerRadius = UDim.new(0, 6)
                local l = Instance.new("TextLabel", b)
                l.BackgroundTransparency = 1
                l.Text = tostring(txt)
                l.Font = Enum.Font.Gotham
                l.TextColor3 = DEFAULT_THEME.text
                l.TextXAlignment = Enum.TextXAlignment.Left
                l.TextScaled = true
                l.Position = UDim2.new(0, 10, 0, 2)
                l.Size = UDim2.new(1, -20, 1, -4)
                Instance.new("UITextSizeConstraint", l).MaxTextSize = 14
                return b
            end

            local function listHeight()
                local count = #items
                if count==0 then return 0 end
                local full = (count*32) + ((count-1)*6) + 8
                local max  = (8*32) + ((8-1)*6) + 8
                return math.min(full, max)
            end

            local open=false
            local function toggle(want)
                local wantOpen = (want==nil) and (not open) or want
                open = wantOpen
                chev.Text = open and "▲" or "▼"
                local h = open and listHeight() or 0
                Tween:Create(row, TweenInfo.new(0.16, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {Size = UDim2.new(1,0,0, DEFAULT_THEME.rowHeight + h)}):Play()
                Tween:Create(opts, TweenInfo.new(0.16, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {Size = UDim2.new(1,-16,0,h)}):Play()
            end

            local function populate(arr)
                for _,c in ipairs(opts:GetChildren()) do if c:IsA("GuiObject") then c:Destroy() end end
                for _,name in ipairs(arr) do
                    local b = makeOption(name)
                    b.Parent = opts
                    b.MouseButton1Click:Connect(function()
                        valueText.Text = tostring(name)
                        toggle(false)
                        if callback then task.spawn(function() pcall(callback,name) end) end
                    end)
                end
                task.defer(function()
                    opts.CanvasSize = UDim2.new(0,0,0, list.AbsoluteContentSize.Y)
                end)
            end
            populate(items)

            local function bind(g) g.InputBegan:Connect(function(i)
                if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then toggle() end
            end) end
            bind(cap); bind(label); bind(valueText); bind(chev); bind(ico)

            local current = default or items[1]
            if current then valueText.Text = tostring(current) end

            return {
                Set=function(v) current=v; valueText.Text=tostring(v); if callback then pcall(callback,v) end end,
                Get=function() return current end,
                SetItems=function(newItems, newDefault)
                    items = newItems or {}
                    populate(items)
                    current = newDefault or items[1]
                    valueText.Text = tostring(current or "")
                    toggle(false)
                end,
                Open=function() toggle(true) end,
                Close=function() toggle(false) end
            }
        end

        local function openThis()
            for _,c in ipairs(content:GetChildren()) do
                if c:IsA("ScrollingFrame") then c.Visible = false end
            end
            page.Visible = true
            selectSide(sideBtn)
            pageTitle.Text = "| " .. (def.name or "Tab")
        end

        local tab = {}
        function tab:AddSection(text)  return TAddSection(text) end
        function tab:AddToggle(opt)    return TAddToggle(opt.icon, opt.text or opt.Name, opt.default, opt.callback or opt.Callback) end
        function tab:AddButton(opt)    return TAddButton(opt.icon, opt.text or opt.Name or "BUTTON", opt.Callback or opt.callback) end
        function tab:AddDropdown(opt)  return TAddDropdown(opt.icon, opt.text or opt.Name, opt.items, opt.default, opt.callback or opt.Callback) end

        sideBtn.MouseButton1Click:Connect(openThis)

        if not sidebar:FindFirstChild("_firstTabSelected") then
            local flag = Instance.new("BoolValue"); flag.Name = "_firstTabSelected"; flag.Parent = sidebar
            openThis()
        end

        return setmetatable(tab, {__index = tab})
    end

    -- posição inicial
    if opts and opts.multi then
        local baseX, baseY, dx, dy = 120, 80, 24, 32
        local k = (#Lib._openWindows) % 8
        local px, py = baseX + dx*k, baseY + dy*k
        local screen = win.Parent and win.Parent.AbsoluteSize or Vector2.new(1280,720)
        px = math.clamp(px, 0, math.max(0, screen.X - win.AbsoluteSize.X))
        py = math.clamp(py, 0, math.max(0, screen.Y - win.AbsoluteSize.Y))
        win.Position = UDim2.fromOffset(px, py)
    else
        win.Position = UDim2.new(0.5, -DEFAULT_THEME.winSize.X.Offset/2, 0.5, -DEFAULT_THEME.winSize.Y.Offset/2)
    end

    -- ===== Minimize/Restore helpers =====
    local prevPos, prevSize
    local function minimize()
        prevPos, prevSize = win.Position, win.Size
        local targetPos  = _G.SyniXDockPos or UDim2.new(0, 14, 1, -60)
        local targetSize = UDim2.fromOffset(160, 44)
        Lib._dockBtn.Visible = true
        local t = TweenInfo.new(0.22, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
        Tween:Create(win, t, {Position = targetPos, Size = targetSize, BackgroundTransparency = 0.15}):Play()
        task.delay(0.24, function() win.Visible=false end)
    end

    local function restore()
        local p = prevPos or UDim2.new(0.5, -DEFAULT_THEME.winSize.X.Offset/2, 0.5, -DEFAULT_THEME.winSize.Y.Offset/2)
        local s = prevSize or DEFAULT_THEME.winSize
        win.Visible = true
        win.Position = Lib._dockBtn.Position
        win.Size     = Lib._dockBtn.Size
        local t = TweenInfo.new(0.22, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
        Tween:Create(win, t, {Position = p, Size = s, BackgroundTransparency = 0}):Play()
        task.delay(0.24, function() Lib._dockBtn.Visible=false end)
    end

    local function toggleMin()
        if win.Visible then minimize() else restore() end
    end

    -- Header buttons
    btnMin.MouseButton1Click:Connect(minimize)
    Lib._dockBtn.MouseButton1Click:Connect(restore)
    btnCls.MouseButton1Click:Connect(function()
        for i=#Lib._openWindows,1,-1 do
            local g = Lib._openWindows[i]
            if g and g.Parent then g:Destroy() end
            table.remove(Lib._openWindows, i)
        end
        Lib._currentWinObj = nil
        Lib._currentGui = nil
        destroyLauncher()
        destroyDock()
        gui:Destroy()
    end)

    -- ===== Config panel logic =====
    local awaiting = false
    btnCfg.MouseButton1Click:Connect(function()
        cfg.Visible = not cfg.Visible
    end)
    cfgClose.MouseButton1Click:Connect(function() cfg.Visible = false end)

    hkBtn.MouseButton1Click:Connect(function()
        if awaiting then return end
        awaiting = true
        hkBtn.Text = "Pressione uma tecla..."
        local conn; conn = UIS.InputBegan:Connect(function(input, gpe)
            if gpe then return end
            if input.UserInputType == Enum.UserInputType.Keyboard then
                HOTKEY = input.KeyCode
                _G.SyniXMinKey = HOTKEY
                hkBtn.Text = "Definir tecla"
                refreshHK()
                awaiting = false
                if conn then conn:Disconnect() end
            end
        end)
    end)

    hkClr.MouseButton1Click:Connect(function()
        HOTKEY = nil
        _G.SyniXMinKey = nil
        refreshHK()
    end)

    btnDiscord.MouseButton1Click:Connect(function()
        copyToClipboard("https://discord.gg/seu-invite")
        btnDiscord.Text = "Copiado!"
        task.delay(1.2, function() btnDiscord.Text = "Copiar Discord" end)
    end)
    btnSite.MouseButton1Click:Connect(function()
        copyToClipboard("https://seusite.exemplo/")
        btnSite.Text = "Copiado!"
        task.delay(1.2, function() btnSite.Text = "Copiar Site" end)
    end)

    -- Hotkey global (não dispara quando há TextBox focado)
    UIS.InputBegan:Connect(function(input, gpe)
        if gpe then return end
        if not HOTKEY then return end
        if UIS:GetFocusedTextBox() then return end
        if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == HOTKEY then
            toggleMin()
        end
    end)

    -- win obj
    local winObj = {}
    local function MakeTabShim(o) return MakeTab(o) end
    function winObj:MakeTab(o) return MakeTabShim(o) end
    function winObj:_getRoots() return gui, win end

    table.insert(Lib._openWindows, gui)
    gui.Destroying:Connect(function()
        for i,g in ipairs(Lib._openWindows) do
            if g == gui then table.remove(Lib._openWindows, i) break end
        end
        if Lib._currentGui == gui then
            Lib._currentGui, Lib._currentWinObj = nil, nil
        end
    end)

    if not (opts and opts.multi) then
        Lib._currentGui = gui
        Lib._currentWinObj = winObj
        Lib._lastOpts = opts
    end

    return winObj
end

-- ===== API =====
function Lib:MakeWindow(opts)
    opts = opts or {}
    if Lib._singleMode then opts.multi = false end
    Lib._launcherEnabled = not opts.noLauncher
    if Lib._launcherEnabled then ensureLauncher() else destroyLauncher(); Lib._lastOpts = nil end
    return self:_spawnWindow(opts)
end

_G.__SyniXSingleton = setmetatable({}, Lib)
return _G.__SyniXSingleton
