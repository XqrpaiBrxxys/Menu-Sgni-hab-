-- SyniXLib.lua v0.4.4
-- UI com Sidebar, Toggle, Button e Dropdown
-- Mudanças desta versão:
-- - REMOVIDOS ícones do Toggle e do Dropdown (somente texto + desc)
-- - Sidebar mantém ícones (configurável por theme.sideIconSize)
-- - Launcher (bolinha) arrastável, para exatamente onde soltar
-- - Janela única por padrão; X fecha tudo (janela + launcher)
-- - Dropdown com cabeçalho fixo, opções abrem por baixo
-- - Suporta "desc" (descrição) em Toggle e Dropdown

if _G.__SyniXSingleton then
    print("[SyniXLib] reusing singleton")
    return _G.__SyniXSingleton
end

print("[SyniXLib] loaded v0.4.4")

local Players = game:GetService("Players")
local UIS     = game:GetService("UserInputService")
local Tween   = game:GetService("TweenService")

local Lib = {}
Lib.__index = Lib

-- ===== Estado =====
Lib._launcherGui     = nil
Lib._launcherBtn     = nil
Lib._launcherEnabled = true
Lib._currentGui      = nil
Lib._currentWinObj   = nil
Lib._lastOpts        = nil
Lib._openWindows     = {}
Lib._singleMode      = true        -- 1 janela por padrão

-- ===== Tema =====
local DEFAULT_THEME = {
    bg_window   = Color3.fromRGB(14,15,20),
    bg_header   = Color3.fromRGB(20,21,28),
    bg_panel    = Color3.fromRGB(18,19,26),
    bg_sidebar  = Color3.fromRGB(16,17,24),
    card        = Color3.fromRGB(24,25,34),
    row         = Color3.fromRGB(28,30,40),
    stroke      = Color3.fromRGB(255,255,255),
    text        = Color3.fromRGB(238,240,248),
    text_muted  = Color3.fromRGB(200,205,220),
    toggle_on   = Color3.fromRGB(245,245,245),
    toggle_off  = Color3.fromRGB(60,62,70),
    knob_on     = Color3.fromRGB(22,24,32),
    knob_off    = Color3.fromRGB(235,238,245),

    sidebarWidth = 176,
    rowHeight    = 48,
    toggleSize   = Vector2.new(84,30),
    knobSize     = Vector2.new(26,26),

    sideIconSize = 28,                 -- tamanho do ícone das abas
    winSize      = UDim2.fromOffset(680,400),
}

-- ===== Utils =====
local function merge(a,b)
    local t = {}
    for k,v in pairs(a or {}) do t[k]=v end
    for k,v in pairs(b or {}) do t[k]=v end
    return t
end

local function enableDrag(frame, clampToScreen)
    frame.Active = true
    local dragging, startPos, startMouse
    local function mousePos()
        local m = UIS:GetMouseLocation()
        return Vector2.new(m.X, m.Y)
    end
    frame.InputBegan:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then
            dragging, startPos, startMouse = true, frame.AbsolutePosition, mousePos()
            i.Changed:Connect(function()
                if i.UserInputState==Enum.UserInputState.End then dragging=false end
            end)
        end
    end)
    UIS.InputChanged:Connect(function(i)
        if not dragging then return end
        if i.UserInputType~=Enum.UserInputType.MouseMovement and i.UserInputType~=Enum.UserInputType.Touch then return end
        local delta = mousePos() - startMouse
        local pos   = startPos + delta
        if clampToScreen and frame.Parent then
            pos = Vector2.new(
                math.clamp(pos.X, 0, math.max(0, frame.Parent.AbsoluteSize.X - frame.AbsoluteSize.X)),
                math.clamp(pos.Y, 0, math.max(0, frame.Parent.AbsoluteSize.Y - frame.AbsoluteSize.Y))
            )
        end
        frame.Position = UDim2.fromOffset(pos.X, pos.Y)
    end)
end

-- Drag do launcher "grudado no dedo"
local function enableLauncherDrag(btn)
    btn.Active = true
    local dragging = false
    local function getMouse()
        local m = UIS:GetMouseLocation()
        return Vector2.new(m.X, m.Y)
    end
    btn.InputBegan:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then
            dragging = true
            i.Changed:Connect(function()
                if i.UserInputState==Enum.UserInputState.End then
                    dragging = false
                    _G.SyniXLauncherPos = btn.Position -- salva onde soltou
                end
            end)
        end
    end)
    UIS.InputChanged:Connect(function(i)
        if not dragging then return end
        if i.UserInputType~=Enum.UserInputType.MouseMovement and i.UserInputType~=Enum.UserInputType.Touch then return end
        local m = getMouse()
        local w,h = btn.AbsoluteSize.X, btn.AbsoluteSize.Y
        local px, py = m.X - w/2, m.Y - h/2
        if btn.Parent then
            local sz = btn.Parent.AbsoluteSize
            px = math.clamp(px, 0, math.max(0, sz.X - w))
            py = math.clamp(py, 0, math.max(0, sz.Y - h))
        end
        btn.Position = UDim2.fromOffset(px, py)
    end)
end

-- ===== Launcher =====
local function destroyLauncher(self)
    if self._launcherBtn then
        if self._launcherBtn.Parent then self._launcherBtn:Destroy() end
        self._launcherBtn = nil
    end
    if self._launcherGui then
        if self._launcherGui.Parent then self._launcherGui:Destroy() end
        self._launcherGui = nil
    end
end

local function ensureLauncher(self)
    if not self._launcherEnabled then return end
    if self._launcherBtn and self._launcherBtn.Parent then return end

    local player = Players.LocalPlayer
    local gui = self._launcherGui
    if not gui or not gui.Parent then
        gui = Instance.new("ScreenGui")
        gui.Name = "SyniX_LauncherRoot"
        gui.IgnoreGuiInset, gui.ResetOnSpawn = true, false
        gui.DisplayOrder = 1000
        gui.Parent = player:WaitForChild("PlayerGui")
        self._launcherGui = gui
    end

    local launcher = Instance.new("ImageButton")
    launcher.Name = "Launcher"
    launcher.Image = "rbxassetid://14862323455"
    launcher.Size = UDim2.fromOffset(56,56)
    launcher.Position = _G.SyniXLauncherPos or UDim2.new(0, 14, 1, -72)
    launcher.BackgroundColor3 = Color3.fromRGB(26,28,36)
    launcher.BorderSizePixel = 0
    launcher.AutoButtonColor = true
    launcher.ZIndex = 1001
    Instance.new("UICorner", launcher).CornerRadius = UDim.new(1,0)
    local s = Instance.new("UIStroke", launcher); s.Transparency = 0.45; s.Color = Color3.fromRGB(255,255,255)
    launcher.Parent = gui

    enableLauncherDrag(launcher)

    launcher.MouseButton1Click:Connect(function()
        if self._currentGui and self._currentGui.Parent then
            self._currentGui.Enabled = not self._currentGui.Enabled
        elseif self._lastOpts then
            self:_spawnWindow(self._lastOpts)
        end
    end)

    self._launcherBtn = launcher
end

-- ===== Construção da janela =====
function Lib:_spawnWindow(opts)
    opts = opts or {}
    if self._singleMode then opts.multi = false end

    local player = Players.LocalPlayer
    local theme = merge(DEFAULT_THEME, (opts and opts.theme) or {})
    if opts and opts.size then theme.winSize = opts.size end

    -- Reusar janela no modo single
    if not (opts and opts.multi) then
        if self._currentGui and self._currentGui.Parent then
            self._currentGui.Enabled = true
            return self._currentWinObj
        end
    end

    local gui = Instance.new("ScreenGui")
    gui.Name = "SyniX_Window"
    gui.IgnoreGuiInset, gui.ResetOnSpawn = true, false
    gui.DisplayOrder = 900
    gui.Parent = player:WaitForChild("PlayerGui")

    local win = Instance.new("Frame")
    win.Name = "Window"
    win.Size = theme.winSize
    win.BackgroundColor3 = theme.bg_window
    Instance.new("UICorner", win).CornerRadius = UDim.new(0,14)
    local wS = Instance.new("UIStroke", win); wS.Color=theme.stroke; wS.Transparency=0.15
    win.Parent = gui
    enableDrag(win, true)

    -- Header
    local header = Instance.new("Frame")
    header.Parent = win
    header.BackgroundColor3 = theme.bg_header
    header.Size = UDim2.new(1, -16, 0, 46)
    header.Position = UDim2.new(0, 8, 0, 8)
    header.BorderSizePixel = 0
    Instance.new("UICorner", header).CornerRadius = UDim.new(0,10)

    local hIcon = Instance.new("ImageLabel", header)
    hIcon.BackgroundTransparency = 1
    hIcon.Image = "rbxassetid://14862323455"
    hIcon.Size = UDim2.fromOffset(22,22)
    hIcon.Position = UDim2.new(0, 10, 0.5, -11)

    local hTitle = Instance.new("TextLabel", header)
    hTitle.BackgroundTransparency = 1
    hTitle.Text = (opts and opts.title) or "SyniX Hub | Free"
    hTitle.Font = Enum.Font.GothamBold
    hTitle.TextScaled = true
    hTitle.TextXAlignment = Enum.TextXAlignment.Left
    hTitle.TextColor3 = theme.text
    hTitle.Position = UDim2.new(0, 40, 0, 4)
    hTitle.Size = UDim2.new(1, -150, 1, -8)
    Instance.new("UITextSizeConstraint", hTitle).MaxTextSize = 20

    local function mkHeadBtn(txt)
        local b = Instance.new("TextButton")
        b.BackgroundColor3 = theme.card
        b.Text = txt
        b.TextScaled = true
        b.Font = Enum.Font.GothamBold
        b.TextColor3 = theme.text
        b.AutoButtonColor = true
        Instance.new("UICorner", b).CornerRadius = UDim.new(0,8)
        return b
    end
    local btnMin = mkHeadBtn("-"); btnMin.Parent = header; btnMin.Size = UDim2.fromOffset(32,26); btnMin.Position = UDim2.new(1,-74,0.5,-13)
    local btnCls = mkHeadBtn("X"); btnCls.Parent = header; btnCls.Size = UDim2.fromOffset(32,26); btnCls.Position = UDim2.new(1,-38,0.5,-13)

    -- Body
    local body = Instance.new("Frame", win)
    body.BackgroundTransparency = 1
    body.Position = UDim2.new(0, 6, 0, 60)
    body.Size = UDim2.new(1, -12, 1, -68)

    -- Sidebar (ScrollingFrame)
    local sidebar = Instance.new("ScrollingFrame", body)
    sidebar.Name = "Sidebar"
    sidebar.BackgroundColor3 = theme.bg_sidebar
    sidebar.Size = UDim2.new(0, theme.sidebarWidth, 1, 0)
    sidebar.Position = UDim2.new(0, 0, 0, 0)
    sidebar.ScrollBarThickness = 4
    sidebar.CanvasSize = UDim2.new(0,0,0,0)
    Instance.new("UICorner", sidebar).CornerRadius = UDim.new(0,10)
    local sbS = Instance.new("UIStroke", sidebar); sbS.Transparency = 0.85; sbS.Color = theme.stroke

    local sList = Instance.new("UIListLayout", sidebar)
    sList.Padding = UDim.new(0,4)
    sList.SortOrder = Enum.SortOrder.LayoutOrder
    sList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        sidebar.CanvasSize = UDim2.new(0,0,0, sList.AbsoluteContentSize.Y + 6)
    end)

    -- Content
    local content = Instance.new("Frame", body)
    content.BackgroundColor3 = theme.bg_panel
    content.Size = UDim2.new(1, -(theme.sidebarWidth+6), 1, 0)
    content.Position = UDim2.new(0, theme.sidebarWidth+6, 0, 0)
    Instance.new("UICorner", content).CornerRadius = UDim.new(0,10)
    local cS = Instance.new("UIStroke", content); cS.Transparency=0.85; cS.Color=theme.stroke

    local pageTitle = Instance.new("TextLabel", content)
    pageTitle.BackgroundTransparency = 1
    pageTitle.Text = "| Home"
    pageTitle.Font = Enum.Font.GothamBlack
    pageTitle.TextColor3 = theme.text
    pageTitle.TextScaled = true
    pageTitle.TextXAlignment = Enum.TextXAlignment.Left
    pageTitle.Position = UDim2.new(0, 10, 0, 8)
    pageTitle.Size = UDim2.new(1, -20, 0, 28)
    Instance.new("UITextSizeConstraint", pageTitle).MaxTextSize = 20

    -- ==== LATERAL: botão 100% largura, com ícone (apenas na sidebar) ====
    local function makeSideItem(iconId, text)
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(1, 0, 0, 38)
        btn.BackgroundColor3 = theme.card
        btn.AutoButtonColor = false
        btn.Text = ""
        Instance.new("UICorner", btn).CornerRadius = UDim.new(0,8)

        local ic = Instance.new("ImageLabel", btn)
        ic.BackgroundTransparency = 1
        ic.Image = iconId or (_G.__SyniXSingleton and _G.__SyniXSingleton.__defaultIcon) or "rbxassetid://14862323455"
        ic.Size = UDim2.fromOffset(theme.sideIconSize, theme.sideIconSize)
        ic.Position = UDim2.new(0, 8, 0.5, -math.floor(theme.sideIconSize/2))
        ic.ImageColor3 = Color3.fromRGB(230,230,235)

        local lb = Instance.new("TextLabel", btn)
        lb.BackgroundTransparency = 1
        lb.Text = text
        lb.Font = Enum.Font.GothamSemibold
        lb.TextXAlignment = Enum.TextXAlignment.Left
        lb.TextColor3 = theme.text
        lb.TextScaled = true
        lb.Position = UDim2.new(0, 8 + theme.sideIconSize + 8, 0, 4)
        lb.Size = UDim2.new(1, -(8 + theme.sideIconSize + 8 + 8), 1, -8)
        Instance.new("UITextSizeConstraint", lb).MaxTextSize = 16
        return btn
    end

    local function selectSide(sideBtn)
        for _,c in ipairs(sidebar:GetChildren()) do
            if c:IsA("TextButton") then
                Tween:Create(c, TweenInfo.new(0.15), {BackgroundColor3 = theme.card}):Play()
            end
        end
        Tween:Create(sideBtn, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(50,52,62)}):Play()
    end

    -- ===== Abas e Widgets =====
    local function MakeTab(def)
        local sideBtn = makeSideItem(def.icon, def.name or "Tab")
        sideBtn.Parent = sidebar

        local page = Instance.new("ScrollingFrame")
        page.BackgroundTransparency = 1
        page.Position = UDim2.new(0, 8, 0, 44)
        page.Size = UDim2.new(1, -16, 1, -54)
        page.ScrollBarThickness = 6
        page.Visible = false
        page.Parent = content
        local pageList = Instance.new("UIListLayout", page)
        pageList.Padding = UDim.new(0,8)
        pageList.SortOrder = Enum.SortOrder.LayoutOrder
        pageList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            page.CanvasSize = UDim2.new(0,0,0,pageList.AbsoluteContentSize.Y + 8)
        end)

        -- Section
        local function TAddSection(text)
            local s = Instance.new("TextLabel", page)
            s.BackgroundTransparency = 1
            s.Text = text
            s.Font = Enum.Font.GothamBold
            s.TextXAlignment = Enum.TextXAlignment.Left
            s.TextColor3 = theme.text
            s.TextScaled = true
            s.Size = UDim2.new(1,0,0,24)
            Instance.new("UITextSizeConstraint", s).MaxTextSize = 16
            return s
        end

        -- Toggle (SEM ÍCONE) + desc opcional
        local function TAddToggle(labelText, default, callback, opt)
            opt = opt or {}
            local hasDesc = (opt.desc ~= nil)
            local rowH = hasDesc and (theme.rowHeight + 18) or theme.rowHeight

            local row = Instance.new("Frame", page)
            row.Size = UDim2.new(1, 0, 0, rowH)
            row.BackgroundColor3 = theme.row
            Instance.new("UICorner", row).CornerRadius = UDim.new(0, 8)

            local label = Instance.new("TextLabel", row)
            label.BackgroundTransparency = 1
            label.Text = string.upper(labelText or "TOGGLE")
            label.Font = Enum.Font.GothamSemibold
            label.TextColor3 = theme.text
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.TextScaled = true
            label.Position = UDim2.new(0, 12, 0, hasDesc and 4 or 2)
            label.Size = UDim2.new(1, - (theme.toggleSize.X + 46), 0, 22)
            Instance.new("UITextSizeConstraint", label).MaxTextSize = 16

            if hasDesc then
                local sub = Instance.new("TextLabel", row)
                sub.BackgroundTransparency = 1
                sub.Text = tostring(opt.desc)
                sub.Font = Enum.Font.Gotham
                sub.TextColor3 = theme.text_muted
                sub.TextXAlignment = Enum.TextXAlignment.Left
                sub.TextScaled = true
                sub.Position = UDim2.new(0, 12, 0, 24)
                sub.Size = UDim2.new(1, - (theme.toggleSize.X + 46), 0, 18)
                Instance.new("UITextSizeConstraint", sub).MaxTextSize = 12
            end

            local btn = Instance.new("TextButton", row)
            btn.Text = ""
            btn.AutoButtonColor = false
            btn.Size = UDim2.fromOffset(theme.toggleSize.X, theme.toggleSize.Y)
            btn.Position = UDim2.new(1, -(theme.toggleSize.X + 12), 0.5, -math.floor(theme.toggleSize.Y/2))
            btn.BackgroundColor3 = theme.toggle_off
            btn.ClipsDescendants = true
            Instance.new("UICorner", btn).CornerRadius = UDim.new(1,0)

            local knob = Instance.new("Frame", btn)
            knob.Size = UDim2.fromOffset(theme.knobSize.X, theme.knobSize.Y)
            knob.Position = UDim2.new(0, 2, 0.5, -math.floor(theme.knobSize.Y/2))
            knob.BackgroundColor3 = theme.knob_off
            Instance.new("UICorner", knob).CornerRadius = UDim.new(1,0)
            local kS = Instance.new("UIStroke", knob); kS.Transparency = 0.7; kS.Color = Color3.fromRGB(0,0,0)

            local offX = 2
            local onX  = math.max(2, theme.toggleSize.X - theme.knobSize.X - 2)

            local value = default and true or false
            local function paint(v)
                if v then
                    Tween:Create(btn,  TweenInfo.new(0.14, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = theme.toggle_on}):Play()
                    Tween:Create(knob, TweenInfo.new(0.14, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                        {Position = UDim2.new(0, onX, 0.5, -math.floor(theme.knobSize.Y/2)), BackgroundColor3 = theme.knob_on}):Play()
                else
                    Tween:Create(btn,  TweenInfo.new(0.14, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = theme.toggle_off}):Play()
                    Tween:Create(knob, TweenInfo.new(0.14, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                        {Position = UDim2.new(0, offX, 0.5, -math.floor(theme.knobSize.Y/2)), BackgroundColor3 = theme.knob_off}):Play()
                end
            end
            paint(value)

            btn.MouseButton1Click:Connect(function()
                value = not value
                paint(value)
                if callback then task.spawn(function() pcall(callback, value) end) end
            end)

            return {
                Set=function(v) value=v and true or false; paint(value); if callback then pcall(callback,value) end end,
                Get=function() return value end
            }
        end

        -- Button (MANTÉM ícone)
        local function TAddButton(iconId, text, callback)
            local row = Instance.new("TextButton", page)
            row.Text = ""
            row.Size = UDim2.new(1, 0, 0, 44)
            row.BackgroundColor3 = theme.card
            row.AutoButtonColor = true
            Instance.new("UICorner", row).CornerRadius = UDim.new(0,8)

            local ico = Instance.new("ImageLabel", row)
            ico.BackgroundTransparency = 1
            ico.Image = iconId or (_G.__SyniXSingleton and _G.__SyniXSingleton.__defaultIcon) or "rbxassetid://14862323455"
            ico.Size = UDim2.fromOffset(18,18)
            ico.Position = UDim2.new(0, 12, 0.5, -9)
            ico.ImageColor3 = Color3.fromRGB(235,235,240)

            local lbl = Instance.new("TextLabel", row)
            lbl.BackgroundTransparency = 1
            lbl.Text = text or "BUTTON"
            lbl.Font = Enum.Font.GothamBold
            lbl.TextColor3 = theme.text
            lbl.TextXAlignment = Enum.TextXAlignment.Left
            lbl.TextScaled = true
            lbl.Position = UDim2.new(0, 36, 0, 0)
            lbl.Size = UDim2.new(1, -36, 1, 0)
            Instance.new("UITextSizeConstraint", lbl).MaxTextSize = 16

            row.MouseButton1Click:Connect(function() if callback then task.spawn(callback) end end)
        end

        -- Dropdown (SEM ÍCONE) + desc no cabeçalho
        local function TAddDropdown(labelText, items, default, callback, opt)
            opt = opt or {}
            items = items or {}
            local hasDesc = (opt.desc ~= nil)
            local capH = hasDesc and (theme.rowHeight + 18) or theme.rowHeight

            local row = Instance.new("Frame", page)
            row.Size = UDim2.new(1, 0, 0, capH)
            row.BackgroundColor3 = theme.row
            row.ClipsDescendants = true
            Instance.new("UICorner", row).CornerRadius = UDim.new(0, 8)

            -- CAP (sem ícone)
            local cap = Instance.new("Frame", row)
            cap.BackgroundTransparency = 1
            cap.Size = UDim2.new(1, 0, 0, capH)
            cap.ZIndex = 2

            local label = Instance.new("TextLabel", cap)
            label.BackgroundTransparency = 1
            label.Text = string.upper(labelText or "DROPDOWN")
            label.Font = Enum.Font.GothamSemibold
            label.TextColor3 = theme.text
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.TextScaled = true
            label.Position = UDim2.new(0, 12, 0, hasDesc and 4 or 2)
            label.Size = UDim2.new(1, -180, 0, 22)
            Instance.new("UITextSizeConstraint", label).MaxTextSize = 16
            label.ZIndex = 2

            if hasDesc then
                local sub = Instance.new("TextLabel", cap)
                sub.BackgroundTransparency = 1
                sub.Text = tostring(opt.desc)
                sub.Font = Enum.Font.Gotham
                sub.TextColor3 = theme.text_muted
                sub.TextXAlignment = Enum.TextXAlignment.Left
                sub.TextScaled = true
                sub.Position = UDim2.new(0, 12, 0, 24)
                sub.Size = UDim2.new(1, -180, 0, 18)
                Instance.new("UITextSizeConstraint", sub).MaxTextSize = 12
                sub.ZIndex = 2
            end

            local valueText = Instance.new("TextLabel", cap)
            valueText.BackgroundTransparency = 1
            valueText.Text = tostring(default or (items[1] or ""))
            valueText.Font = Enum.Font.Gotham
            valueText.TextColor3 = theme.text
            valueText.TextXAlignment = Enum.TextXAlignment.Right
            valueText.TextScaled = true
            valueText.Position = UDim2.new(0, 0, 0, 6)
            valueText.Size = UDim2.new(1, -56, 1, -12)
            Instance.new("UITextSizeConstraint", valueText).MaxTextSize = 14
            valueText.ZIndex = 2

            local chevron = Instance.new("TextLabel", cap)
            chevron.BackgroundTransparency = 1
            chevron.Text = "▼"
            chevron.Font = Enum.Font.GothamBold
            chevron.TextColor3 = theme.text
            chevron.TextScaled = true
            chevron.Position = UDim2.new(1, -40, 0, 8)
            chevron.Size = UDim2.fromOffset(28, 28)
            Instance.new("UITextSizeConstraint", chevron).MaxTextSize = 16
            chevron.ZIndex = 2

            -- LISTA
            local optsF = Instance.new("Frame", row)
            optsF.BackgroundTransparency = 1
            optsF.Position = UDim2.new(0, 8, 0, capH)
            optsF.Size = UDim2.new(1, -16, 0, 0)
            optsF.ClipsDescendants = true
            optsF.ZIndex = 1

            local optsList = Instance.new("UIListLayout", optsF)
            optsList.Padding = UDim.new(0, 6)
            optsList.SortOrder = Enum.SortOrder.LayoutOrder

            local function makeOption(txt)
                local b = Instance.new("TextButton")
                b.Text = ""
                b.AutoButtonColor = true
                b.Size = UDim2.new(1, 0, 0, 32)
                b.BackgroundColor3 = theme.card
                Instance.new("UICorner", b).CornerRadius = UDim.new(0, 6)
                local l = Instance.new("TextLabel", b)
                l.BackgroundTransparency = 1
                l.Text = tostring(txt)
                l.Font = Enum.Font.Gotham
                l.TextColor3 = theme.text
                l.TextXAlignment = Enum.TextXAlignment.Left
                l.TextScaled = true
                l.Position = UDim2.new(0, 10, 0, 2)
                l.Size = UDim2.new(1, -20, 1, -4)
                Instance.new("UITextSizeConstraint", l).MaxTextSize = 14
                return b
            end

            local function populate(list)
                for _,c in ipairs(optsF:GetChildren()) do
                    if c:IsA("GuiObject") then c:Destroy() end
                end
                for _,name in ipairs(list) do
                    local b = makeOption(name)
                    b.Parent = optsF
                    b.MouseButton1Click:Connect(function()
                        valueText.Text = tostring(name)
                        doToggle(false)
                        if callback then task.spawn(function() pcall(callback, name) end) end
                    end)
                end
            end
            populate(items)

            local function heightForList()
                local count = #items
                if count == 0 then return 0 end
                return (count * 32) + ((count-1) * 6) + 8
            end

            local open = false
            function doToggle(want)
                local wantOpen = (want==nil) and (not open) or want
                open = wantOpen
                chevron.Text = open and "▲" or "▼"
                local listH = open and heightForList() or 0
                Tween:Create(row,  TweenInfo.new(0.16, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {Size = UDim2.new(1, 0, 0, capH + listH)}):Play()
                Tween:Create(optsF, TweenInfo.new(0.16, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {Size = UDim2.new(1, -16, 0, listH)}):Play()
            end

            cap.InputBegan:Connect(function(i)
                if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then
                    doToggle()
                end
            end)

            local current = default or items[1]
            if current then valueText.Text = tostring(current) end

            return {
                Set=function(v)
                    current = v
                    valueText.Text = tostring(v)
                    if callback then pcall(callback, v) end
                end,
                Get=function() return current end,
                SetItems=function(newItems, newDefault)
                    items = newItems or {}
                    populate(items)
                    current = newDefault or items[1]
                    valueText.Text = tostring(current or "")
                    doToggle(false)
                end,
                Open=function() doToggle(true) end,
                Close=function() doToggle(false) end
            }
        end

        local function openThis()
            for _,c in ipairs(content:GetChildren()) do
                if c:IsA("ScrollingFrame") then c.Visible = false end
            end
            page.Visible = true
            selectSide(sideBtn)
            pageTitle.Text = "| " .. (def.name or "Tab")
        end

        local tab = {}
        function tab:AddSection(text)  return TAddSection(text) end
        -- NOVAS assinaturas: sem "icon" para Toggle e Dropdown
        function tab:AddToggle(opt)    return TAddToggle(opt.text, opt.default, opt.callback, opt) end
        function tab:AddButton(opt)    return TAddButton(opt.icon, opt.text, opt.callback) end
        function tab:AddDropdown(opt)  return TAddDropdown(opt.text, opt.items, opt.default, opt.callback, opt) end

        sideBtn.MouseButton1Click:Connect(openThis)

        if not sidebar:FindFirstChild("_firstTabSelected") then
            local flag = Instance.new("BoolValue"); flag.Name = "_firstTabSelected"; flag.Parent = sidebar
            openThis()
        end

        return setmetatable(tab, {__index = tab})
    end

    -- posição inicial
    if opts and opts.multi then
        local baseX, baseY, dx, dy = 120, 80, 24, 32
        local k = (#self._openWindows) % 8
        local px, py = baseX + dx*k, baseY + dy*k
        local screen = win.Parent and win.Parent.AbsoluteSize or Vector2.new(1280,720)
        px = math.clamp(px, 0, math.max(0, screen.X - win.AbsoluteSize.X))
        py = math.clamp(py, 0, math.max(0, screen.Y - win.AbsoluteSize.Y))
        win.Position = UDim2.fromOffset(px, py)
    else
        win.Position = UDim2.new(0.5, -theme.winSize.X.Offset/2, 0.5, -theme.winSize.Y.Offset/2)
    end

    -- header buttons
    btnMin.MouseButton1Click:Connect(function() gui.Enabled = false end)
    btnCls.MouseButton1Click:Connect(function()
        for i=#self._openWindows,1,-1 do
            local g = self._openWindows[i]
            if g and g.Parent then g:Destroy() end
            table.remove(self._openWindows, i)
        end
        self._currentWinObj = nil
        self._currentGui = nil
        self._lastOpts = nil
        destroyLauncher(self)
        gui:Destroy()
    end)

    -- win obj
    local winObj = {}
    function winObj:MakeTab(o) return MakeTab(o) end
    function winObj:_getRoots() return gui, win end

    table.insert(self._openWindows, gui)
    gui.Destroying:Connect(function()
        for i,g in ipairs(self._openWindows) do
            if g == gui then table.remove(self._openWindows, i) break end
        end
        if self._currentGui == gui then
            self._currentGui, self._currentWinObj = nil, nil
        end
    end)

    if not (opts and opts.multi) then
        self._currentGui = gui
        self._currentWinObj = winObj
        self._lastOpts = opts
    end

    return winObj
end

-- ===== API =====
function Lib:MakeWindow(opts)
    opts = opts or {}
    if self._singleMode then opts.multi = false end
    self._launcherEnabled = not opts.noLauncher
    if self._launcherEnabled then ensureLauncher(self) else destroyLauncher(self); self._lastOpts = nil end
    return self:_spawnWindow(opts)
end

_G.__SyniXSingleton = setmetatable({
    __defaultIcon = "rbxassetid://14862323455"  -- usado na sidebar e nos botões
}, Lib)

return _G.__SyniXSingleton
