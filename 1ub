-- SyniXLib.lua v0.4.6
-- UI com Sidebar, Toggle, Button, Dropdown e Painel de Settings
-- - Header com ícone de configurações BRANCO, botão minimizar (com animação) e fechar
-- - Launcher (bolinha) arrastável; toggle "Show Floating Button" liga/desliga
-- - Modo SINGLE (evita duplicar janelas). X fecha tudo (janela + launcher)
-- - Dropdown com cabeçalho fixo; múltiplos dropdowns funcionam
-- - API:
--      local win = Lib:MakeWindow({ title="SyniX Hub | Free" })
--      local tab = win:MakeTab({ name="Main", icon="rbxassetid://..." })
--      tab:AddSection("Title")
--      tab:AddToggle({ text="AFK", default=false, callback=function(v) end })
--      tab:AddButton({ text="Do", callback=function() end })
--      tab:AddDropdown({ text="Mode", items={"A","B"}, default="A", callback=function(v) end })

print("[SyniXLib] loaded v0.4.6")

if _G.__SyniXSingleton then return _G.__SyniXSingleton end

local Players = game:GetService("Players")
local UIS     = game:GetService("UserInputService")
local Tween   = game:GetService("TweenService")

local Lib = {}
Lib.__index = Lib

-- ===== Estado =====
Lib._launcherGui     = nil
Lib._launcherBtn     = nil
Lib._launcherEnabled = true
Lib._currentGui      = nil
Lib._currentWinObj   = nil
Lib._lastOpts        = nil
Lib._openWindows     = {}

-- keybind para minimizar via teclado no PC
Lib._minimizeKey     = Enum.KeyCode.P

-- ===== Comportamento =====
Lib._singleMode      = true          -- 1 janela por padrão
Lib._launcherSnap    = false         -- bolinha NÃO dá snap; fica onde soltar

-- ===== Tema =====
local DEFAULT_THEME = {
    bg_window   = Color3.fromRGB(14,15,20),
    bg_header   = Color3.fromRGB(20,21,28),
    bg_panel    = Color3.fromRGB(18,19,26),
    bg_sidebar  = Color3.fromRGB(16,17,24),
    card        = Color3.fromRGB(24,25,34),
    row         = Color3.fromRGB(28,30,40),
    stroke      = Color3.fromRGB(255,255,255),
    text        = Color3.fromRGB(238,240,248),
    text_muted  = Color3.fromRGB(200,205,220),
    toggle_on   = Color3.fromRGB(245,245,245),
    toggle_off  = Color3.fromRGB(60,62,70),
    knob_on     = Color3.fromRGB(22,24,32),
    knob_off    = Color3.fromRGB(235,238,245),

    sidebarWidth = 176,
    rowHeight    = 48,
    toggleSize   = Vector2.new(84,30),
    knobSize     = Vector2.new(26,26),

    sideIconSize = 28,
    winSize      = UDim2.fromOffset(680,400),
}

-- ===== Utils =====
local function merge(a,b)
    local t = {}
    for k,v in pairs(a or {}) do t[k]=v end
    for k,v in pairs(b or {}) do t[k]=v end
    return t
end

local function enableDrag(frame, clampToScreen)
    frame.Active = true
    local dragging, startPos, startMouse
    local function mousePos()
        local m = UIS:GetMouseLocation()
        return Vector2.new(m.X, m.Y)
    end
    frame.InputBegan:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then
            dragging, startPos, startMouse = true, frame.AbsolutePosition, mousePos()
            i.Changed:Connect(function()
                if i.UserInputState==Enum.UserInputState.End then dragging=false end
            end)
        end
    end)
    UIS.InputChanged:Connect(function(i)
        if not dragging then return end
        if i.UserInputType~=Enum.UserInputType.MouseMovement and i.UserInputType~=Enum.UserInputType.Touch then return end
        local delta = mousePos() - startMouse
        local pos   = startPos + delta
        if clampToScreen and frame.Parent then
            pos = Vector2.new(
                math.clamp(pos.X, 0, math.max(0, frame.Parent.AbsoluteSize.X - frame.AbsoluteSize.X)),
                math.clamp(pos.Y, 0, math.max(0, frame.Parent.AbsoluteSize.Y - frame.AbsoluteSize.Y))
            )
        end
        frame.Position = UDim2.fromOffset(pos.X, pos.Y)
    end)
end

-- Drag grudado no dedo (launcher)
local function enableLauncherDrag(btn)
    btn.Active = true
    local dragging = false
    local function getMouse()
        local m = UIS:GetMouseLocation()
        return Vector2.new(m.X, m.Y)
    end
    btn.InputBegan:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then
            dragging = true
            i.Changed:Connect(function()
                if i.UserInputState==Enum.UserInputState.End then
                    dragging = false
                    _G.SyniXLauncherPos = btn.Position -- salva onde soltou
                end
            end)
        end
    end)
    UIS.InputChanged:Connect(function(i)
        if not dragging then return end
        if i.UserInputType~=Enum.UserInputType.MouseMovement and i.UserInputType~=Enum.UserInputType.Touch then return end
        local m = getMouse()
        local w,h = btn.AbsoluteSize.X, btn.AbsoluteSize.Y
        local px, py = m.X - w/2, m.Y - h/2
        if btn.Parent then
            local sz = btn.Parent.AbsoluteSize
            px = math.clamp(px, 0, math.max(0, sz.X - w))
            py = math.clamp(py, 0, math.max(0, sz.Y - h))
        end
        btn.Position = UDim2.fromOffset(px, py)
    end)
end

-- ===== Launcher =====
local function ensureLauncher()
    if not Lib._launcherEnabled then return end
    if Lib._launcherBtn and Lib._launcherBtn.Parent then return end

    local player = Players.LocalPlayer
    local gui = Lib._launcherGui
    if not gui or not gui.Parent then
        gui = Instance.new("ScreenGui")
        gui.Name = "SyniX_LauncherRoot"
        gui.IgnoreGuiInset, gui.ResetOnSpawn = true, false
        gui.DisplayOrder = 1000
        gui.Parent = player:WaitForChild("PlayerGui")
        Lib._launcherGui = gui
    end

    local launcher = Instance.new("ImageButton")
    launcher.Name = "Launcher"
    launcher.Image = "rbxassetid://14862323455"
    launcher.Size = UDim2.fromOffset(64,64)               -- tamanho moderado
    launcher.Position = _G.SyniXLauncherPos or UDim2.new(0, 14, 1, -84)
    launcher.BackgroundColor3 = Color3.fromRGB(26,28,36)
    launcher.BorderSizePixel = 0
    launcher.AutoButtonColor = true
    launcher.ZIndex = 1001
    Instance.new("UICorner", launcher).CornerRadius = UDim.new(1,0)
    local s = Instance.new("UIStroke", launcher); s.Transparency = 0.45; s.Color = Color3.fromRGB(255,255,255)
    launcher.Parent = gui

    enableLauncherDrag(launcher)

    launcher.MouseButton1Click:Connect(function()
        if Lib._currentGui and Lib._currentGui.Parent then
            Lib._currentGui.Enabled = not Lib._currentGui.Enabled
        elseif Lib._lastOpts then
            Lib:_spawnWindow(Lib._lastOpts)
        end
    end)

    Lib._launcherBtn = launcher
end

local function destroyLauncher()
    if Lib._launcherBtn then
        if Lib._launcherBtn.Parent then Lib._launcherBtn:Destroy() end
        Lib._launcherBtn = nil
    end
    if Lib._launcherGui then
        if Lib._launcherGui.Parent then Lib._launcherGui:Destroy() end
        Lib._launcherGui = nil
    end
end

-- ===== Minimizar com animação =====
local function animateMinimize(winFrame, done)
    -- leve fade + contraída
    local scale = Instance.new("UIScale", winFrame)
    scale.Scale = 1
    Tween:Create(scale, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Scale = 0.96}):Play()
    for _,g in ipairs(winFrame:GetDescendants()) do
        if g:IsA("GuiObject") then
            Tween:Create(g, TweenInfo.new(0.15), {BackgroundTransparency = math.clamp((g.BackgroundTransparency or 0)+0.1,0,1)}):Play()
        end
        if g:IsA("TextLabel") or g:IsA("TextButton") then
            Tween:Create(g, TweenInfo.new(0.15), {TextTransparency = 0.25}):Play()
        end
        if g:IsA("ImageLabel") or g:IsA("ImageButton") then
            Tween:Create(g, TweenInfo.new(0.15), {ImageTransparency = 0.25}):Play()
        end
    end
    task.delay(0.16, function()
        if done then done() end
        pcall(function() scale:Destroy() end)
    end)
end

-- ===== Painel de Settings =====
local function buildSettingsPanel(theme, winRootGui, winFrame, launcherGetterSetter)
    -- overlay
    local overlay = Instance.new("Frame")
    overlay.BackgroundColor3 = Color3.fromRGB(0,0,0)
    overlay.BackgroundTransparency = 0.35
    overlay.BorderSizePixel = 0
    overlay.Size = UDim2.fromScale(1,1)
    overlay.ZIndex = 1500
    overlay.Parent = winRootGui

    -- modal
    local panel = Instance.new("Frame")
    panel.Size = UDim2.fromOffset(520, 360)
    panel.Position = UDim2.new(0.5, -260, 0.5, -180)
    panel.BackgroundColor3 = theme.bg_panel
    panel.ZIndex = 1600
    panel.Parent = overlay
    Instance.new("UICorner", panel).CornerRadius = UDim.new(0,14)
    local pS = Instance.new("UIStroke", panel); pS.Color = theme.stroke; pS.Transparency = 0.7

    -- título
    local title = Instance.new("TextLabel", panel)
    title.BackgroundTransparency = 1
    title.Text = "SyniX | Settings"
    title.Font = Enum.Font.GothamBlack
    title.TextScaled = true
    title.TextColor3 = theme.text
    title.Size = UDim2.new(1, -24, 0, 36)
    title.Position = UDim2.new(0, 12, 0, 12)
    Instance.new("UITextSizeConstraint", title).MaxTextSize = 26

    -- Card: Keybind
    local keyCard = Instance.new("Frame", panel)
    keyCard.BackgroundColor3 = theme.card
    keyCard.Size = UDim2.new(1, -32, 0, 88)       -- mais alto para espaçamento
    keyCard.Position = UDim2.new(0, 16, 0, 52)
    Instance.new("UICorner", keyCard).CornerRadius = UDim.new(0,12)

    local kLabel = Instance.new("TextLabel", keyCard)
    kLabel.BackgroundTransparency = 1
    kLabel.Text = "Minimize Menu Key (PC)"
    kLabel.Font = Enum.Font.Gotham
    kLabel.TextScaled = true
    kLabel.TextColor3 = theme.text
    kLabel.Position = UDim2.new(0, 14, 0, 16)     -- padding superior ajustado
    kLabel.Size = UDim2.new(1, -170, 0, 28)
    Instance.new("UITextSizeConstraint", kLabel).MaxTextSize = 16

    local keyBtn = Instance.new("TextButton", keyCard)
    keyBtn.Text = (Lib._minimizeKey and Lib._minimizeKey.Name) or "P"
    keyBtn.Font = Enum.Font.GothamBold
    keyBtn.TextScaled = true
    keyBtn.TextColor3 = theme.text
    keyBtn.BackgroundColor3 = theme.row
    keyBtn.AutoButtonColor = true
    keyBtn.Size = UDim2.fromOffset(160, 38)
    keyBtn.Position = UDim2.new(1, -174, 0.5, -19)
    Instance.new("UICorner", keyBtn).CornerRadius = UDim.new(0,8)
    Instance.new("UITextSizeConstraint", keyBtn).MaxTextSize = 18

    local listening = false
    keyBtn.MouseButton1Click:Connect(function()
        listening = true
        keyBtn.Text = "Press a key..."
        local conn; conn = UIS.InputBegan:Connect(function(input, gpe)
            if gpe then return end
            if input.UserInputType == Enum.UserInputType.Keyboard then
                Lib._minimizeKey = input.KeyCode
                keyBtn.Text = input.KeyCode.Name
                listening = false
                conn:Disconnect()
            end
        end)
    end)

    -- Card: Toggle mostrar bolinha
    local floatCard = Instance.new("Frame", panel)
    floatCard.BackgroundColor3 = theme.card
    floatCard.Size = UDim2.new(1, -32, 0, 78)
    floatCard.Position = UDim2.new(0, 16, 0, 148)
    Instance.new("UICorner", floatCard).CornerRadius = UDim.new(0,12)

    local fLabel = Instance.new("TextLabel", floatCard)
    fLabel.BackgroundTransparency = 1
    fLabel.Text = "Show Floating Button"
    fLabel.Font = Enum.Font.Gotham
    fLabel.TextScaled = true
    fLabel.TextColor3 = theme.text
    fLabel.Position = UDim2.new(0, 14, 0, 18)
    fLabel.Size = UDim2.new(1, -170, 0, 26)
    Instance.new("UITextSizeConstraint", fLabel).MaxTextSize = 16

    -- toggle
    local tBtn = Instance.new("TextButton", floatCard)
    tBtn.Text = ""
    tBtn.AutoButtonColor = false
    tBtn.Size = UDim2.fromOffset(84, 30)
    tBtn.Position = UDim2.new(1, -102, 0.5, -15)
    tBtn.BackgroundColor3 = DEFAULT_THEME.toggle_on
    Instance.new("UICorner", tBtn).CornerRadius = UDim.new(1,0)

    local knob = Instance.new("Frame", tBtn)
    knob.Size = UDim2.fromOffset(26,26)
    knob.Position = UDim2.new(0, 56, 0.5, -13)
    knob.BackgroundColor3 = DEFAULT_THEME.knob_on
    Instance.new("UICorner", knob).CornerRadius = UDim.new(1,0)

    local function paintToggle(show)
        if show then
            Tween:Create(tBtn, TweenInfo.new(0.12), {BackgroundColor3 = DEFAULT_THEME.toggle_on}):Play()
            Tween:Create(knob, TweenInfo.new(0.12), {Position = UDim2.new(0, 56, 0.5, -13), BackgroundColor3 = DEFAULT_THEME.knob_on}):Play()
        else
            Tween:Create(tBtn, TweenInfo.new(0.12), {BackgroundColor3 = DEFAULT_THEME.toggle_off}):Play()
            Tween:Create(knob, TweenInfo.new(0.12), {Position = UDim2.new(0, 2, 0.5, -13), BackgroundColor3 = DEFAULT_THEME.knob_off}):Play()
        end
    end

    paintToggle(launcherGetterSetter(true))
    tBtn.MouseButton1Click:Connect(function()
        local newVal = not launcherGetterSetter(true)
        launcherGetterSetter(false, newVal)
        paintToggle(newVal)
    end)

    -- Créditos
    local credits = Instance.new("TextLabel", panel)
    credits.BackgroundTransparency = 1
    credits.Text = "Credits: SyniX Hub"
    credits.Font = Enum.Font.Gotham
    credits.TextScaled = true
    credits.TextColor3 = theme.text_muted
    credits.Position = UDim2.new(0, 16, 0, 228)
    credits.Size = UDim2.new(1, -32, 0, 24)
    Instance.new("UITextSizeConstraint", credits).MaxTextSize = 18

    -- Botões inferiores
    local btnCopy = Instance.new("TextButton", panel)
    btnCopy.Text = "Copy Discord"
    btnCopy.Font = Enum.Font.GothamBlack
    btnCopy.TextScaled = true
    btnCopy.TextColor3 = theme.text
    btnCopy.BackgroundColor3 = theme.card
    btnCopy.Size = UDim2.new(0.46, -20, 0, 54)
    btnCopy.Position = UDim2.new(0, 16, 1, -70)
    Instance.new("UICorner", btnCopy).CornerRadius = UDim.new(0,12)
    Instance.new("UITextSizeConstraint", btnCopy).MaxTextSize = 22

    local btnClose = Instance.new("TextButton", panel)
    btnClose.Text = "Close"
    btnClose.Font = Enum.Font.GothamBlack
    btnClose.TextScaled = true
    btnClose.TextColor3 = theme.text
    btnClose.BackgroundColor3 = theme.card
    btnClose.Size = UDim2.new(0.46, -20, 0, 54)
    btnClose.Position = UDim2.new(1, - (16 + btnClose.Size.X.Offset), 1, -70)
    Instance.new("UICorner", btnClose).CornerRadius = UDim.new(0,12)
    Instance.new("UITextSizeConstraint", btnClose).MaxTextSize = 22

    btnCopy.MouseButton1Click:Connect(function()
        pcall(function() setclipboard("https://discord.gg/SEU-LINK") end)
    end)
    btnClose.MouseButton1Click:Connect(function() overlay:Destroy() end)

    -- fechar ao clicar no overlay (fora do modal)
    overlay.InputBegan:Connect(function(i)
        if i.UserInputType == Enum.UserInputType.MouseButton1 then
            if not panel.AbsolutePosition or not panel.AbsoluteSize then return end
            -- clique fora do panel
            overlay:Destroy()
        end
    end)

    return overlay
end

-- ===== Construção da janela =====
function Lib:_spawnWindow(opts)
    opts = opts or {}
    if Lib._singleMode then opts.multi = false end

    local player = Players.LocalPlayer
    local theme = merge(DEFAULT_THEME, (opts and opts.theme) or {})
    if opts and opts.size then theme.winSize = opts.size end

    -- reusa janela no modo single
    if not (opts and opts.multi) then
        if Lib._currentGui and Lib._currentGui.Parent then
            Lib._currentGui.Enabled = true
            return Lib._currentWinObj
        end
    end

    local gui = Instance.new("ScreenGui")
    gui.Name = "SyniX_Window"
    gui.IgnoreGuiInset, gui.ResetOnSpawn = true, false
    gui.DisplayOrder = 900
    gui.Parent = player:WaitForChild("PlayerGui")

    local win = Instance.new("Frame")
    win.Name = "Window"
    win.Size = theme.winSize
    win.BackgroundColor3 = theme.bg_window
    Instance.new("UICorner", win).CornerRadius = UDim.new(0,14)
    local wS = Instance.new("UIStroke", win); wS.Color=theme.stroke; wS.Transparency=0.15
    win.Parent = gui
    enableDrag(win, true)

    -- Header
    local header = Instance.new("Frame")
    header.Parent = win
    header.BackgroundColor3 = theme.bg_header
    header.Size = UDim2.new(1, -16, 0, 46)
    header.Position = UDim2.new(0, 8, 0, 8)
    header.BorderSizePixel = 0
    Instance.new("UICorner", header).CornerRadius = UDim.new(0,10)

    local hIcon = Instance.new("ImageLabel", header)
    hIcon.BackgroundTransparency = 1
    hIcon.Image = "rbxassetid://14862323455"
    hIcon.Size = UDim2.fromOffset(22,22)
    hIcon.Position = UDim2.new(0, 10, 0.5, -11)

    local hTitle = Instance.new("TextLabel", header)
    hTitle.BackgroundTransparency = 1
    hTitle.Text = (opts and opts.title) or "SyniX Hub | Free"
    hTitle.Font = Enum.Font.GothamBold
    hTitle.TextScaled = true
    hTitle.TextXAlignment = Enum.TextXAlignment.Left
    hTitle.TextColor3 = theme.text
    hTitle.Position = UDim2.new(0, 40, 0, 4)
    hTitle.Size = UDim2.new(1, -180, 1, -8)
    Instance.new("UITextSizeConstraint", hTitle).MaxTextSize = 20

    local function mkHeadBtn(txt)
        local b = Instance.new("TextButton")
        b.BackgroundColor3 = theme.card
        b.Text = txt
        b.TextScaled = true
        b.Font = Enum.Font.GothamBold
        b.TextColor3 = theme.text
        b.AutoButtonColor = true
        Instance.new("UICorner", b).CornerRadius = UDim.new(0,8)
        return b
    end

    -- ⚙️ botão de configurações (branco)
    local configBtn = Instance.new("ImageButton")
    configBtn.Name = "ConfigButton"
    configBtn.BackgroundTransparency = 1
    configBtn.Image = "rbxassetid://18702777518"
    configBtn.ImageColor3 = Color3.fromRGB(255,255,255)
    configBtn.Size = UDim2.fromOffset(22,22)
    configBtn.Position = UDim2.new(1, -112, 0.5, -11)
    configBtn.ZIndex = 2000
    configBtn.Parent = header

    local btnMin = mkHeadBtn("-"); btnMin.Parent = header; btnMin.Size = UDim2.fromOffset(32,26); btnMin.Position = UDim2.new(1,-74,0.5,-13)
    local btnCls = mkHeadBtn("X"); btnCls.Parent = header; btnCls.Size = UDim2.fromOffset(32,26); btnCls.Position = UDim2.new(1,-38,0.5,-13)

    -- Body
    local body = Instance.new("Frame", win)
    body.BackgroundTransparency = 1
    body.Position = UDim2.new(0, 6, 0, 60)
    body.Size = UDim2.new(1, -12, 1, -68)

    -- Sidebar (ScrollingFrame)
    local sidebar = Instance.new("ScrollingFrame", body)
    sidebar.Name = "Sidebar"
    sidebar.BackgroundColor3 = theme.bg_sidebar
    sidebar.Size = UDim2.new(0, theme.sidebarWidth, 1, 0)
    sidebar.Position = UDim2.new(0, 0, 0, 0)
    sidebar.ScrollBarThickness = 4
    sidebar.CanvasSize = UDim2.new(0,0,0,0)
    Instance.new("UICorner", sidebar).CornerRadius = UDim.new(0,10)
    local sbS = Instance.new("UIStroke", sidebar); sbS.Transparency = 0.85; sbS.Color = theme.stroke

    local sList = Instance.new("UIListLayout", sidebar)
    sList.Padding = UDim.new(0,4)
    sList.SortOrder = Enum.SortOrder.LayoutOrder
    sList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        sidebar.CanvasSize = UDim2.new(0,0,0, sList.AbsoluteContentSize.Y + 6)
    end)

    -- Content
    local content = Instance.new("Frame", body)
    content.BackgroundColor3 = theme.bg_panel
    content.Size = UDim2.new(1, -(theme.sidebarWidth+6), 1, 0)
    content.Position = UDim2.new(0, theme.sidebarWidth+6, 0, 0)
    Instance.new("UICorner", content).CornerRadius = UDim.new(0,10)
    local cS = Instance.new("UIStroke", content); cS.Transparency=0.85; cS.Color=theme.stroke

    local pageTitle = Instance.new("TextLabel", content)
    pageTitle.BackgroundTransparency = 1
    pageTitle.Text = "| Home"
    pageTitle.Font = Enum.Font.GothamBlack
    pageTitle.TextColor3 = theme.text
    pageTitle.TextScaled = true
    pageTitle.TextXAlignment = Enum.TextXAlignment.Left
    pageTitle.Position = UDim2.new(0, 10, 0, 8)
    pageTitle.Size = UDim2.new(1, -20, 0, 28)
    Instance.new("UITextSizeConstraint", pageTitle).MaxTextSize = 20

    -- ==== LATERAL: botões 100% de largura, com ícone maior ====
    local function makeSideItem(iconId, text)
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(1, 0, 0, 38)
        btn.BackgroundColor3 = theme.card
        btn.AutoButtonColor = false
        btn.Text = ""
        Instance.new("UICorner", btn).CornerRadius = UDim.new(0,8)

        local ic = Instance.new("ImageLabel", btn)
        ic.BackgroundTransparency = 1
        ic.Image = iconId or "rbxassetid://14862323455"
        ic.Size = UDim2.fromOffset(DEFAULT_THEME.sideIconSize, DEFAULT_THEME.sideIconSize)
        ic.Position = UDim2.new(0, 8, 0.5, -math.floor(DEFAULT_THEME.sideIconSize/2))
        ic.ImageColor3 = Color3.fromRGB(230,230,235)

        local lb = Instance.new("TextLabel", btn)
        lb.BackgroundTransparency = 1
        lb.Text = text
        lb.Font = Enum.Font.GothamSemibold
        lb.TextXAlignment = Enum.TextXAlignment.Left
        lb.TextColor3 = theme.text
        lb.TextScaled = true
        lb.Position = UDim2.new(0, 8 + DEFAULT_THEME.sideIconSize + 8, 0, 4)
        lb.Size = UDim2.new(1, -(8 + DEFAULT_THEME.sideIconSize + 8 + 8), 1, -8)
        Instance.new("UITextSizeConstraint", lb).MaxTextSize = 16
        return btn
    end

    local function selectSide(sideBtn)
        for _,c in ipairs(sidebar:GetChildren()) do
            if c:IsA("TextButton") then
                Tween:Create(c, TweenInfo.new(0.15), {BackgroundColor3 = theme.card}):Play()
            end
        end
        Tween:Create(sideBtn, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(50,52,62)}):Play()
    end

    -- ===== Widgets =====
    local function MakeTab(def)
        local sideBtn = makeSideItem(def.icon, def.name or "Tab")
        sideBtn.Parent = sidebar

        local page = Instance.new("ScrollingFrame")
        page.BackgroundTransparency = 1
        page.Position = UDim2.new(0, 8, 0, 44)
        page.Size = UDim2.new(1, -16, 1, -54)
        page.ScrollBarThickness = 6
        page.Visible = false
        page.Parent = content
        local pageList = Instance.new("UIListLayout", page)
        pageList.Padding = UDim.new(0,8)
        pageList.SortOrder = Enum.SortOrder.LayoutOrder
        pageList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            page.CanvasSize = UDim2.new(0,0,0,pageList.AbsoluteContentSize.Y + 8)
        end)

        local function TAddSection(text)
            local s = Instance.new("TextLabel", page)
            s.BackgroundTransparency = 1
            s.Text = text
            s.Font = Enum.Font.GothamBold
            s.TextXAlignment = Enum.TextXAlignment.Left
            s.TextColor3 = theme.text
            s.TextScaled = true
            s.Size = UDim2.new(1,0,0,24)
            Instance.new("UITextSizeConstraint", s).MaxTextSize = 16
            return s
        end

        local function TAddToggle(iconId, labelText, default, callback)
            local row = Instance.new("Frame", page)
            row.Size = UDim2.new(1, 0, 0, DEFAULT_THEME.rowHeight)
            row.BackgroundColor3 = theme.row
            Instance.new("UICorner", row).CornerRadius = UDim.new(0, 8)

            local label = Instance.new("TextLabel", row)
            label.BackgroundTransparency = 1
            label.Text = string.upper(labelText or "TOGGLE")
            label.Font = Enum.Font.GothamSemibold
            label.TextColor3 = theme.text
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.TextScaled = true
            label.Position = UDim2.new(0, 16, 0, 2)
            label.Size = UDim2.new(1, - (DEFAULT_THEME.toggleSize.X + 80), 1, -4)
            Instance.new("UITextSizeConstraint", label).MaxTextSize = 16

            local btn = Instance.new("TextButton", row)
            btn.Text = ""
            btn.AutoButtonColor = false
            btn.Size = UDim2.fromOffset(DEFAULT_THEME.toggleSize.X, DEFAULT_THEME.toggleSize.Y)
            btn.Position = UDim2.new(1, -(DEFAULT_THEME.toggleSize.X + 12), 0.5, -math.floor(DEFAULT_THEME.toggleSize.Y/2))
            btn.BackgroundColor3 = DEFAULT_THEME.toggle_off
            btn.ClipsDescendants = true
            Instance.new("UICorner", btn).CornerRadius = UDim.new(1,0)

            local knob = Instance.new("Frame", btn)
            knob.Size = UDim2.fromOffset(DEFAULT_THEME.knobSize.X, DEFAULT_THEME.knobSize.Y)
            knob.Position = UDim2.new(0, 2, 0.5, -math.floor(DEFAULT_THEME.knobSize.Y/2))
            knob.BackgroundColor3 = DEFAULT_THEME.knob_off
            Instance.new("UICorner", knob).CornerRadius = UDim.new(1,0)

            local offX = 2
            local onX  = math.max(2, DEFAULT_THEME.toggleSize.X - DEFAULT_THEME.knobSize.X - 2)

            local value = default and true or false
            local function paint(v)
                if v then
                    Tween:Create(btn,  TweenInfo.new(0.14), {BackgroundColor3 = DEFAULT_THEME.toggle_on}):Play()
                    Tween:Create(knob, TweenInfo.new(0.14),
                        {Position = UDim2.new(0, onX, 0.5, -math.floor(DEFAULT_THEME.knobSize.Y/2)), BackgroundColor3 = DEFAULT_THEME.knob_on}):Play()
                else
                    Tween:Create(btn,  TweenInfo.new(0.14), {BackgroundColor3 = DEFAULT_THEME.toggle_off}):Play()
                    Tween:Create(knob, TweenInfo.new(0.14),
                        {Position = UDim2.new(0, offX, 0.5, -math.floor(DEFAULT_THEME.knobSize.Y/2)), BackgroundColor3 = DEFAULT_THEME.knob_off}):Play()
                end
            end
            paint(value)

            btn.MouseButton1Click:Connect(function()
                value = not value
                paint(value)
                if callback then task.spawn(function() pcall(callback, value) end) end
            end)

            return {
                Set=function(v) value=v and true or false; paint(value); if callback then pcall(callback,value) end end,
                Get=function() return value end
            }
        end

        local function TAddButton(iconId, text, callback)
            local row = Instance.new("TextButton", page)
            row.Text = ""
            row.Size = UDim2.new(1, 0, 0, 44)
            row.BackgroundColor3 = theme.card
            row.AutoButtonColor = true
            Instance.new("UICorner", row).CornerRadius = UDim.new(0,8)

            local lbl = Instance.new("TextLabel", row)
            lbl.BackgroundTransparency = 1
            lbl.Text = text or "BUTTON"
            lbl.Font = Enum.Font.GothamBold
            lbl.TextColor3 = theme.text
            lbl.TextXAlignment = Enum.TextXAlignment.Left
            lbl.TextScaled = true
            lbl.Position = UDim2.new(0, 16, 0, 0)
            lbl.Size = UDim2.new(1, -20, 1, 0)
            Instance.new("UITextSizeConstraint", lbl).MaxTextSize = 16

            row.MouseButton1Click:Connect(function()
                if typeof(callback) == "function" then
                    task.spawn(function() local ok,err=pcall(callback); if not ok then warn("[SyniXLib][Button] Callback error:",err) end end)
                end
            end)

            return { Instance=row, SetText=function(t) lbl.Text=t end }
        end

        local function TAddDropdown(iconId, labelText, items, default, callback)
            items = items or {}
            local capH = DEFAULT_THEME.rowHeight
            local maxVisible = 8

            local row = Instance.new("Frame", page)
            row.Size = UDim2.new(1, 0, 0, capH)
            row.BackgroundColor3 = theme.row
            row.ClipsDescendants = true
            Instance.new("UICorner", row).CornerRadius = UDim.new(0, 8)

            local cap = Instance.new("Frame", row)
            cap.BackgroundTransparency = 1
            cap.Size = UDim2.new(1, 0, 0, capH)
            cap.ZIndex = 2

            local label = Instance.new("TextLabel", cap)
            label.BackgroundTransparency = 1
            label.Text = string.upper(labelText or "DROPDOWN")
            label.Font = Enum.Font.GothamSemibold
            label.TextColor3 = theme.text
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.TextScaled = true
            label.Position = UDim2.new(0, 16, 0, 2)
            label.Size = UDim2.new(1, -180, 1, -4)
            Instance.new("UITextSizeConstraint", label).MaxTextSize = 16
            label.ZIndex = 2

            local valueText = Instance.new("TextLabel", cap)
            valueText.BackgroundTransparency = 1
            valueText.Text = tostring(default or (items[1] or ""))
            valueText.Font = Enum.Font.Gotham
            valueText.TextColor3 = theme.text
            valueText.TextXAlignment = Enum.TextXAlignment.Right
            valueText.TextScaled = true
            valueText.Position = UDim2.new(0, 0, 0, 6)
            valueText.Size = UDim2.new(1, -56, 1, -12)
            Instance.new("UITextSizeConstraint", valueText).MaxTextSize = 14
            valueText.ZIndex = 2

            local chevron = Instance.new("TextLabel", cap)
            chevron.BackgroundTransparency = 1
            chevron.Text = "▼"
            chevron.Font = Enum.Font.GothamBold
            chevron.TextColor3 = theme.text
            chevron.TextScaled = true
            chevron.Position = UDim2.new(1, -40, 0, 8)
            chevron.Size = UDim2.fromOffset(28, 28)
            Instance.new("UITextSizeConstraint", chevron).MaxTextSize = 16
            chevron.ZIndex = 2

            local opts = Instance.new("ScrollingFrame", row)
            opts.BackgroundTransparency = 1
            opts.Position = UDim2.new(0, 8, 0, capH)
            opts.Size = UDim2.new(1, -16, 0, 0)
            opts.ScrollBarThickness = 6
            opts.ClipsDescendants = true
            opts.ZIndex = 1
            opts.CanvasSize = UDim2.new(0,0,0,0)

            local optsList = Instance.new("UIListLayout", opts)
            optsList.Padding = UDim.new(0, 6)
            optsList.SortOrder = Enum.SortOrder.LayoutOrder
            optsList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                opts.CanvasSize = UDim2.new(0,0,0, optsList.AbsoluteContentSize.Y)
            end)

            local function makeOption(txt)
                local b = Instance.new("TextButton")
                b.Text = ""
                b.AutoButtonColor = true
                b.Size = UDim2.new(1, 0, 0, 32)
                b.BackgroundColor3 = theme.card
                Instance.new("UICorner", b).CornerRadius = UDim.new(0, 6)
                local l = Instance.new("TextLabel", b)
                l.BackgroundTransparency = 1
                l.Text = tostring(txt)
                l.Font = Enum.Font.Gotham
                l.TextColor3 = theme.text
                l.TextXAlignment = Enum.TextXAlignment.Left
                l.TextScaled = true
                l.Position = UDim2.new(0, 10, 0, 2)
                l.Size = UDim2.new(1, -20, 1, -4)
                Instance.new("UITextSizeConstraint", l).MaxTextSize = 14
                return b
            end

            local function heightForList()
                local count = #items
                if count == 0 then return 0 end
                local fullH = (count * 32) + ((count-1) * 6) + 8
                local maxH  = (maxVisible * 32) + ((maxVisible-1) * 6) + 8
                return math.min(fullH, maxH)
            end

            local open = false
            local function toggle(want)
                local wantOpen = (want==nil) and (not open) or want
                open = wantOpen
                chevron.Text = open and "▲" or "▼"
                local listH = open and heightForList() or 0
                Tween:Create(row,  TweenInfo.new(0.16), {Size = UDim2.new(1, 0, 0, DEFAULT_THEME.rowHeight + listH)}):Play()
                Tween:Create(opts, TweenInfo.new(0.16), {Size = UDim2.new(1, -16, 0, listH)}):Play()
            end

            local function populate(list)
                for _,c in ipairs(opts:GetChildren()) do
                    if c:IsA("GuiObject") then c:Destroy() end
                end
                for _,name in ipairs(list) do
                    local b = makeOption(name)
                    b.Parent = opts
                    b.MouseButton1Click:Connect(function()
                        valueText.Text = tostring(name)
                        toggle(false)
                        if callback then task.spawn(function() pcall(callback, name) end) end
                    end)
                end
                task.defer(function()
                    opts.CanvasSize = UDim2.new(0,0,0, optsList.AbsoluteContentSize.Y)
                end)
            end
            populate(items)

            local function bindToggleClick(guiObj)
                guiObj.InputBegan:Connect(function(i)
                    if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then
                        toggle()
                    end
                end)
            end
            bindToggleClick(cap); bindToggleClick(label); bindToggleClick(valueText); bindToggleClick(chevron)

            local current = default or items[1]
            if current then valueText.Text = tostring(current) end

            return {
                Set=function(v) current=v; valueText.Text=tostring(v); if callback then pcall(callback,v) end end,
                Get=function() return current end,
                SetItems=function(newItems, newDefault)
                    items = newItems or {}
                    populate(items)
                    current = newDefault or items[1]
                    valueText.Text = tostring(current or "")
                    toggle(false)
                end,
                Open=function() toggle(true) end,
                Close=function() toggle(false) end
            }
        end

        local function openThis()
            for _,c in ipairs(content:GetChildren()) do
                if c:IsA("ScrollingFrame") then c.Visible = false end
            end
            page.Visible = true
            selectSide(sideBtn)
            pageTitle.Text = "| " .. (def.name or "Tab")
        end

        local tab = {}
        function tab:AddSection(text)  return TAddSection(text) end
        function tab:AddToggle(opt)    return TAddToggle(opt.icon, opt.text or opt.Name, opt.default, opt.callback or opt.Callback) end
        function tab:AddButton(opt)    return TAddButton(opt.icon, opt.text or opt.Name or "BUTTON", opt.Callback or opt.callback) end
        function tab:AddDropdown(opt)  return TAddDropdown(opt.icon, opt.text or opt.Name, opt.items, opt.default, opt.callback or opt.Callback) end

        sideBtn.MouseButton1Click:Connect(openThis)

        if not sidebar:FindFirstChild("_firstTabSelected") then
            local flag = Instance.new("BoolValue"); flag.Name = "_firstTabSelected"; flag.Parent = sidebar
            openThis()
        end

        return setmetatable(tab, {__index = tab})
    end

    -- posição inicial
    if opts and opts.multi then
        local baseX, baseY, dx, dy = 120, 80, 24, 32
        local k = (#Lib._openWindows) % 8
        local px, py = baseX + dx*k, baseY + dy*k
        local screen = win.Parent and win.Parent.AbsoluteSize or Vector2.new(1280,720)
        px = math.clamp(px, 0, math.max(0, screen.X - win.AbsoluteSize.X))
        py = math.clamp(py, 0, math.max(0, screen.Y - win.AbsoluteSize.Y))
        win.Position = UDim2.fromOffset(px, py)
    else
        win.Position = UDim2.new(0.5, -DEFAULT_THEME.winSize.X.Offset/2, 0.5, -DEFAULT_THEME.winSize.Y.Offset/2)
    end

    -- header: minimizar e fechar
    btnMin.MouseButton1Click:Connect(function()
        animateMinimize(win, function() gui.Enabled = false end)
    end)
    btnCls.MouseButton1Click:Connect(function()
        for i=#Lib._openWindows,1,-1 do
            local g = Lib._openWindows[i]
            if g and g.Parent then g:Destroy() end
            table.remove(Lib._openWindows, i)
        end
        Lib._currentWinObj = nil
        Lib._currentGui = nil
        destroyLauncher()
        gui:Destroy()
    end)

    -- ⚙️ abrir painel de settings
    configBtn.MouseButton1Click:Connect(function()
        local function launcherGetSet(isGet, value)
            if isGet then
                return (Lib._launcherBtn ~= nil)
            else
                if value then
                    Lib._launcherEnabled = true
                    ensureLauncher()
                else
                    Lib._launcherEnabled = false
                    destroyLauncher()
                end
            end
        end
        buildSettingsPanel(theme, gui, win, launcherGetSet)
    end)

    -- keybind global (PC) para minimizar
    gui:GetPropertyChangedSignal("Enabled"):Connect(function()
        -- nada extra por enquanto
    end)
    UIS.InputBegan:Connect(function(input, gpe)
        if gpe or not Lib._minimizeKey then return end
        if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Lib._minimizeKey then
            if gui.Parent then
                if gui.Enabled then
                    animateMinimize(win, function() gui.Enabled = false end)
                else
                    gui.Enabled = true
                end
            end
        end
    end)

    -- win obj
    local winObj = {}
    function winObj:MakeTab(o) return MakeTab(o) end
    function winObj:_getRoots() return gui, win end

    table.insert(Lib._openWindows, gui)
    gui.Destroying:Connect(function()
        for i,g in ipairs(Lib._openWindows) do
            if g == gui then table.remove(Lib._openWindows, i) break end
        end
        if Lib._currentGui == gui then
            Lib._currentGui, Lib._currentWinObj = nil, nil
        end
    end)

    if not (opts and opts.multi) then
        Lib._currentGui = gui
        Lib._currentWinObj = winObj
        Lib._lastOpts = opts
    end

    return winObj
end

-- ===== API =====
function Lib:MakeWindow(opts)
    opts = opts or {}
    if Lib._singleMode then opts.multi = false end
    Lib._launcherEnabled = not opts.noLauncher
    if Lib._launcherEnabled then ensureLauncher() else destroyLauncher(); Lib._lastOpts = nil end
    return self:_spawnWindow(opts)
end

_G.__SyniXSingleton = setmetatable({}, Lib)
return _G.__SyniXSingleton
