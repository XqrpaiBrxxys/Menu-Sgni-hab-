-- SyniXLib.lua v0.4.5
-- Novidades:
--  - ⚙ Config pequeno sempre on-top
--  - "-" e Hotkey minimizam a janela principal E o menu de Config
--  - Copiar Discord com múltiplas tentativas + fallback (TextBox selecionado)
--  - Toggle "Mostrar Launcher (bolinha)" persiste e respeita estado
--  - Keybind configurável para minimizar/mostrar (hotkey global)

print("[SyniXLib] loaded v0.4.5")

if _G.__SyniXSingleton then return _G.__SyniXSingleton end

local Players = game:GetService("Players")
local UIS     = game:GetService("UserInputService")
local Tween   = game:GetService("TweenService")

local Lib = {}
Lib.__index = Lib

-- ===== Estado =====
Lib._launcherGui     = nil
Lib._launcherBtn     = nil
Lib._currentGui      = nil
Lib._currentWinObj   = nil
Lib._lastOpts        = nil
Lib._openWindows     = {}

-- Launcher
Lib._launcherEnabled = true
Lib._showLauncher    = (_G.SyniX_Settings and _G.SyniX_Settings.showLauncher) ~= false -- default true

-- Config
Lib._settingsGui       = nil
Lib._settingsOpen      = false
Lib._settingsWasOpen   = false  -- reabre se estava aberto antes de minimizar
Lib._capturingKey      = false
Lib._hotkeyConn        = nil

-- Keybind p/ minimizar
local defaultKeyName = (_G.SyniX_Settings and _G.SyniX_Settings.minKeyName) or "M"
Lib._minKey = Enum.KeyCode[defaultKeyName] or Enum.KeyCode.M

-- Discord invite
Lib._discordLink = (_G.SyniX_Settings and _G.SyniX_Settings.discordLink)
                or _G.SyniX_DiscordInvite
                or "https://discord.gg/BvQ8F4ux7h"

-- ===== Comportamento =====
Lib._singleMode      = true
Lib._launcherSnap    = false

-- ===== Tema =====
local DEFAULT_THEME = {
    bg_window   = Color3.fromRGB(14,15,20),
    bg_header   = Color3.fromRGB(20,21,28),
    bg_panel    = Color3.fromRGB(18,19,26),
    bg_sidebar  = Color3.fromRGB(16,17,24),
    card        = Color3.fromRGB(24,25,34),
    row         = Color3.fromRGB(28,30,40),
    stroke      = Color3.fromRGB(255,255,255),
    text        = Color3.fromRGB(238,240,248),
    text_muted  = Color3.fromRGB(200,205,220),
    toggle_on   = Color3.fromRGB(245,245,245),
    toggle_off  = Color3.fromRGB(60,62,70),
    knob_on     = Color3.fromRGB(22,24,32),
    knob_off    = Color3.fromRGB(235,238,245),

    sidebarWidth = 176,
    rowHeight    = 48,
    toggleSize   = Vector2.new(84,30),
    knobSize     = Vector2.new(26,26),

    sideIconSize = 28,
    winSize      = UDim2.fromOffset(680,400),
}

-- ===== Utils =====
local function merge(a,b)
    local t = {}
    for k,v in pairs(a or {}) do t[k]=v end
    for k,v in pairs(b or {}) do t[k]=v end
    return t
end

local function enableDrag(frame, clampToScreen)
    frame.Active = true
    local dragging, startPos, startMouse
    local function mousePos()
        local m = UIS:GetMouseLocation()
        return Vector2.new(m.X, m.Y)
    end
    frame.InputBegan:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then
            dragging, startPos, startMouse = true, frame.AbsolutePosition, mousePos()
            i.Changed:Connect(function()
                if i.UserInputState==Enum.UserInputState.End then dragging=false end
            end)
        end
    end)
    UIS.InputChanged:Connect(function(i)
        if not dragging then return end
        if i.UserInputType~=Enum.UserInputType.MouseMovement and i.UserInputType~=Enum.UserInputType.Touch then return end
        local delta = mousePos() - startMouse
        local pos   = startPos + delta
        if clampToScreen and frame.Parent then
            pos = Vector2.new(
                math.clamp(pos.X, 0, math.max(0, frame.Parent.AbsoluteSize.X - frame.AbsoluteSize.X)),
                math.clamp(pos.Y, 0, math.max(0, frame.Parent.AbsoluteSize.Y - frame.AbsoluteSize.Y))
            )
        end
        frame.Position = UDim2.fromOffset(pos.X, pos.Y)
    end)
end

local function enableLauncherDrag(btn)
    btn.Active = true
    local dragging = false
    local function getMouse()
        local m = UIS:GetMouseLocation()
        return Vector2.new(m.X, m.Y)
    end
    btn.InputBegan:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then
            dragging = true
            i.Changed:Connect(function()
                if i.UserInputState==Enum.UserInputState.End then
                    dragging = false
                    _G.SyniXLauncherPos = btn.Position -- salva posição
                end
            end)
        end
    end)
    UIS.InputChanged:Connect(function(i)
        if not dragging then return end
        if i.UserInputType~=Enum.UserInputType.MouseMovement and i.UserInputType~=Enum.UserInputType.Touch then return end
        local m = getMouse()
        local w,h = btn.AbsoluteSize.X, btn.AbsoluteSize.Y
        local px, py = m.X - w/2, m.Y - h/2
        if btn.Parent then
            local sz = btn.Parent.AbsoluteSize
            px = math.clamp(px, 0, math.max(0, sz.X - w))
            py = math.clamp(py, 0, math.max(0, sz.Y - h))
        end
        btn.Position = UDim2.fromOffset(px, py)
    end)
end

local function saveSettings()
    _G.SyniX_Settings = _G.SyniX_Settings or {}
    _G.SyniX_Settings.minKeyName  = Lib._minKey and Lib._minKey.Name or "M"
    _G.SyniX_Settings.showLauncher= (Lib._showLauncher ~= false)
    _G.SyniX_Settings.discordLink = Lib._discordLink
end

-- Copiar para clipboard com várias opções + fallback
local function tryCopy(text)
    if typeof(text) ~= "string" or #text == 0 then return false, "texto inválido" end
    local tried = false
    local ok = false
    local function safecall(fn, ...)
        local s, e = pcall(fn, ...)
        return s, e
    end

    -- 1) setclipboard
    if rawget(getfenv() or _G, "setclipboard") then
        tried = true
        ok = pcall(setclipboard, text)
        if ok then return true end
    end
    -- 2) toclipboard
    if not ok and rawget(getfenv() or _G, "toclipboard") then
        tried = true
        ok = pcall(toclipboard, text)
        if ok then return true end
    end
    -- 3) Synapse / ScriptWare-like
    if not ok and rawget(_G, "syn") and syn then
        if syn.write_clipboard then
            tried = true
            ok = pcall(syn.write_clipboard, text)
            if ok then return true end
        end
        if not ok and syn.clipboard and syn.clipboard.set then
            tried = true
            local s = pcall(syn.clipboard.set, text)
            if s then return true end
        end
    end
    -- 4) Outras variantes comuns
    if not ok and rawget(_G, "clipboard") and clipboard and clipboard.set then
        tried = true
        ok = pcall(clipboard.set, text)
        if ok then return true end
    end

    return false, tried and "executor bloqueou" or "sem API de clipboard"
end

-- ===== Launcher =====
local function ensureLauncher()
    if not Lib._launcherEnabled then return end
    if Lib._showLauncher == false then
        if Lib._launcherBtn then
            if Lib._launcherBtn.Parent then Lib._launcherBtn:Destroy() end
            Lib._launcherBtn = nil
        end
        if Lib._launcherGui and Lib._launcherGui.Parent then
            Lib._launcherGui:Destroy(); Lib._launcherGui=nil
        end
        return
    end

    if Lib._launcherBtn and Lib._launcherBtn.Parent then return end

    local player = Players.LocalPlayer
    local gui = Lib._launcherGui
    if not gui or not gui.Parent then
        gui = Instance.new("ScreenGui")
        gui.Name = "SyniX_LauncherRoot"
        gui.IgnoreGuiInset, gui.ResetOnSpawn = true, false
        gui.DisplayOrder = 1000
        gui.Parent = player:WaitForChild("PlayerGui")
        Lib._launcherGui = gui
    end

    local launcher = Instance.new("ImageButton")
    launcher.Name = "Launcher"
    launcher.Image = "rbxassetid://14862323455"
    launcher.Size = UDim2.fromOffset(56,56)
    launcher.Position = _G.SyniXLauncherPos or UDim2.new(0, 14, 1, -72)
    launcher.BackgroundColor3 = Color3.fromRGB(26,28,36)
    launcher.BorderSizePixel = 0
    launcher.AutoButtonColor = true
    launcher.ZIndex = 1001
    Instance.new("UICorner", launcher).CornerRadius = UDim.new(1,0)
    local s = Instance.new("UIStroke", launcher); s.Transparency = 0.45; s.Color = Color3.fromRGB(255,255,255)
    launcher.Parent = gui

    enableLauncherDrag(launcher)

    launcher.MouseButton1Click:Connect(function()
        if Lib._currentGui and Lib._currentGui.Parent then
            local newState = not Lib._currentGui.Enabled
            Lib:_setMainVisible(newState)
        elseif Lib._lastOpts then
            Lib:_spawnWindow(Lib._lastOpts)
        end
    end)

    Lib._launcherBtn = launcher
end

local function destroyLauncher()
    if Lib._launcherBtn then
        if Lib._launcherBtn.Parent then Lib._launcherBtn:Destroy() end
        Lib._launcherBtn = nil
    end
    if Lib._launcherGui then
        if Lib._launcherGui.Parent then Lib._launcherGui:Destroy() end
        Lib._launcherGui = nil
    end
end

local function refreshLauncherVisibility()
    if Lib._showLauncher == false then destroyLauncher() else ensureLauncher() end
end

-- ===== Sincronizar visibilidade principal + config =====
function Lib:_setMainVisible(on)
    if not (Lib._currentGui and Lib._currentGui.Parent) then return end
    if on then
        Lib._currentGui.Enabled = true
        if Lib._settingsGui and Lib._settingsGui.Parent then
            Lib._settingsGui.Enabled = (Lib._settingsWasOpen == true)
            Lib._settingsOpen = Lib._settingsGui.Enabled
        end
    else
        Lib._settingsWasOpen = (Lib._settingsGui and Lib._settingsGui.Parent and Lib._settingsGui.Enabled) or false
        if Lib._settingsGui and Lib._settingsGui.Parent then
            Lib._settingsGui.Enabled = false
            Lib._settingsOpen = false
        end
        Lib._currentGui.Enabled = false
    end
end

-- ===== Hotkey global para minimizar/mostrar =====
local function bindGlobalHotkey()
    if Lib._hotkeyConn then return end
    Lib._hotkeyConn = UIS.InputBegan:Connect(function(input, gpe)
        if gpe then return end
        if Lib._capturingKey then return end
        if input.UserInputType == Enum.UserInputType.Keyboard then
            if input.KeyCode == Lib._minKey then
                if Lib._currentGui and Lib._currentGui.Parent then
                    Lib:_setMainVisible(not Lib._currentGui.Enabled)
                elseif Lib._lastOpts then
                    Lib:_spawnWindow(Lib._lastOpts)
                end
            end
        end
    end)
end
bindGlobalHotkey()

-- ===== Config (pequena, on-top) =====
function Lib:SetDiscord(link)
    if type(link)=="string" and #link>0 then
        Lib._discordLink = link
        saveSettings()
    end
end

local function buildSettingsUI(anchorWin)
    if Lib._settingsGui and Lib._settingsGui.Parent then return Lib._settingsGui end

    local player = Players.LocalPlayer
    local gui = Instance.new("ScreenGui")
    gui.Name = "SyniX_Settings"
    gui.IgnoreGuiInset, gui.ResetOnSpawn = true, false
    gui.DisplayOrder = 1200 -- sempre na frente
    gui.Parent = player:WaitForChild("PlayerGui")

    local panel = Instance.new("Frame")
    panel.Name = "Panel"
    panel.Size = UDim2.fromOffset(320, 210)
    panel.BackgroundColor3 = Color3.fromRGB(20,21,28)
    panel.Parent = gui
    Instance.new("UICorner", panel).CornerRadius = UDim.new(0,12)
    local st = Instance.new("UIStroke", panel); st.Color = Color3.fromRGB(255,255,255); st.Transparency = 0.2

    -- Header
    local head = Instance.new("Frame", panel)
    head.Size = UDim2.new(1, -12, 0, 38)
    head.Position = UDim2.new(0, 6, 0, 6)
    head.BackgroundColor3 = Color3.fromRGB(24,25,34)
    Instance.new("UICorner", head).CornerRadius = UDim.new(0,8)
    local hs = Instance.new("UIStroke", head); hs.Transparency = 0.7

    local title = Instance.new("TextLabel", head)
    title.BackgroundTransparency = 1
    title.Text = "Configurações"
    title.Font = Enum.Font.GothamBold
    title.TextColor3 = Color3.fromRGB(238,240,248)
    title.TextScaled = true
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Position = UDim2.new(0, 10, 0, 4)
    title.Size = UDim2.new(1, -90, 1, -8)
    Instance.new("UITextSizeConstraint", title).MaxTextSize = 18

    local minCfg = Instance.new("TextButton", head)
    minCfg.Text = "-"
    minCfg.Font = Enum.Font.GothamBold
    minCfg.TextScaled = true
    minCfg.TextColor3 = Color3.fromRGB(238,240,248)
    minCfg.Size = UDim2.fromOffset(30,24)
    minCfg.Position = UDim2.new(1,-70,0.5,-12)
    minCfg.BackgroundColor3 = Color3.fromRGB(30,32,44)
    Instance.new("UICorner", minCfg).CornerRadius = UDim.new(0,6)
    Instance.new("UITextSizeConstraint", minCfg).MaxTextSize = 16

    local closeCfg = Instance.new("TextButton", head)
    closeCfg.Text = "X"
    closeCfg.Font = Enum.Font.GothamBold
    closeCfg.TextScaled = true
    closeCfg.TextColor3 = Color3.fromRGB(238,240,248)
    closeCfg.Size = UDim2.fromOffset(30,24)
    closeCfg.Position = UDim2.new(1,-36,0.5,-12)
    closeCfg.BackgroundColor3 = Color3.fromRGB(30,32,44)
    Instance.new("UICorner", closeCfg).CornerRadius = UDim.new(0,6)
    Instance.new("UITextSizeConstraint", closeCfg).MaxTextSize = 16

    -- Corpo
    local body = Instance.new("Frame", panel)
    body.BackgroundTransparency = 1
    body.Position = UDim2.new(0, 10, 0, 52)
    body.Size = UDim2.new(1, -20, 1, -62)

    local list = Instance.new("UIListLayout", body)
    list.Padding = UDim.new(0,8)
    list.SortOrder = Enum.SortOrder.LayoutOrder

    -- Row: Keybind
    local rowKey = Instance.new("Frame", body)
    rowKey.Size = UDim2.new(1,0,0,38)
    rowKey.BackgroundColor3 = Color3.fromRGB(28,30,40)
    Instance.new("UICorner", rowKey).CornerRadius = UDim.new(0,8)

    local lbKey = Instance.new("TextLabel", rowKey)
    lbKey.BackgroundTransparency = 1
    lbKey.Text = "MINIMIZE MENU KEY (PC)"
    lbKey.Font = Enum.Font.GothamSemibold
    lbKey.TextScaled = true
    lbKey.TextXAlignment = Enum.TextXAlignment.Left
    lbKey.TextColor3 = Color3.fromRGB(238,240,248)
    lbKey.Position = UDim2.new(0, 10, 0, 4)
    lbKey.Size = UDim2.new(1, -130, 1, -8)
    Instance.new("UITextSizeConstraint", lbKey).MaxTextSize = 15

    local keyBtn = Instance.new("TextButton", rowKey)
    keyBtn.Text = Lib._minKey and Lib._minKey.Name or "M"
    keyBtn.Font = Enum.Font.GothamBold
    keyBtn.TextScaled = true
    keyBtn.TextColor3 = Color3.fromRGB(20,21,28)
    keyBtn.Size = UDim2.fromOffset(96, 30)
    keyBtn.Position = UDim2.new(1, -106, 0.5, -15)
    keyBtn.BackgroundColor3 = Color3.fromRGB(235,238,245)
    Instance.new("UICorner", keyBtn).CornerRadius = UDim.new(0,8)
    Instance.new("UITextSizeConstraint", keyBtn).MaxTextSize = 16

    -- Row: Toggle bolinha
    local rowBall = Instance.new("Frame", body)
    rowBall.Size = UDim2.new(1,0,0,38)
    rowBall.BackgroundColor3 = Color3.fromRGB(28,30,40)
    Instance.new("UICorner", rowBall).CornerRadius = UDim.new(0,8)

    local lbBall = Instance.new("TextLabel", rowBall)
    lbBall.BackgroundTransparency = 1
    lbBall.Text = "MOSTRAR LAUNCHER (BOLINHA)"
    lbBall.Font = Enum.Font.GothamSemibold
    lbBall.TextScaled = true
    lbBall.TextXAlignment = Enum.TextXAlignment.Left
    lbBall.TextColor3 = Color3.fromRGB(238,240,248)
    lbBall.Position = UDim2.new(0, 10, 0, 4)
    lbBall.Size = UDim2.new(1, -140, 1, -8)
    Instance.new("UITextSizeConstraint", lbBall).MaxTextSize = 15

    local tBtn = Instance.new("TextButton", rowBall)
    tBtn.Text = ""
    tBtn.AutoButtonColor = false
    tBtn.Size = UDim2.fromOffset(66, 26)
    tBtn.Position = UDim2.new(1, -76, 0.5, -13)
    tBtn.BackgroundColor3 = Lib._showLauncher and Color3.fromRGB(245,245,245) or Color3.fromRGB(60,62,70)
    Instance.new("UICorner", tBtn).CornerRadius = UDim.new(1,0)

    local knob = Instance.new("Frame", tBtn)
    knob.Size = UDim2.fromOffset(22,22)
    knob.Position = Lib._showLauncher and UDim2.new(0, 42, 0.5, -11) or UDim2.new(0, 2, 0.5, -11)
    knob.BackgroundColor3 = Lib._showLauncher and Color3.fromRGB(22,24,32) or Color3.fromRGB(235,238,245)
    Instance.new("UICorner", knob).CornerRadius = UDim.new(1,0)
    local ks = Instance.new("UIStroke", knob); ks.Transparency = 0.7

    local function paintToggle(v)
        Tween:Create(tBtn, TweenInfo.new(0.14), {BackgroundColor3 = v and Color3.fromRGB(245,245,245) or Color3.fromRGB(60,62,70)}):Play()
        Tween:Create(knob, TweenInfo.new(0.14), {
            Position = v and UDim2.new(0, 42, 0.5, -11) or UDim2.new(0, 2, 0.5, -11),
            BackgroundColor3 = v and Color3.fromRGB(22,24,32) or Color3.fromRGB(235,238,245)
        }):Play()
    end

    -- Row: Copiar Discord
    local rowDisc = Instance.new("Frame", body)
    rowDisc.Size = UDim2.new(1,0,0,38)
    rowDisc.BackgroundColor3 = Color3.fromRGB(24,25,34)
    Instance.new("UICorner", rowDisc).CornerRadius = UDim.new(0,8)

    local discBtn = Instance.new("TextButton", rowDisc)
    discBtn.Text = ""
    discBtn.AutoButtonColor = true
    discBtn.BackgroundTransparency = 1
    discBtn.Size = UDim2.new(1,0,1,0)
    discBtn.Position = UDim2.new(0,0,0,0)

    local ic = Instance.new("ImageLabel", rowDisc)
    ic.BackgroundTransparency = 1
    ic.Image = "rbxassetid://14862323455"
    ic.Size = UDim2.fromOffset(18,18)
    ic.Position = UDim2.new(0, 10, 0.5, -9)
    ic.ImageColor3 = Color3.fromRGB(235,235,240)

    local lbDisc = Instance.new("TextLabel", rowDisc)
    lbDisc.BackgroundTransparency = 1
    lbDisc.Text = "Copiar link do Discord"
    lbDisc.Font = Enum.Font.GothamBold
    lbDisc.TextScaled = true
    lbDisc.TextXAlignment = Enum.TextXAlignment.Left
    lbDisc.TextColor3 = Color3.fromRGB(238,240,248)
    lbDisc.Position = UDim2.new(0, 36, 0, 0)
    lbDisc.Size = UDim2.new(1, -36, 1, 0)
    Instance.new("UITextSizeConstraint", lbDisc).MaxTextSize = 16

    -- Fallback: TextBox oculto (aparece só quando precisa)
    local copyBox = Instance.new("TextBox", panel)
    copyBox.Visible = false
    copyBox.Size = UDim2.fromOffset(1,1)
    copyBox.Position = UDim2.fromOffset(-1000,-1000) -- fora da tela
    copyBox.TextEditable = true
    copyBox.Text = ""

    -- Toast
    local toast = Instance.new("TextLabel", panel)
    toast.BackgroundTransparency = 1
    toast.Text = ""
    toast.Font = Enum.Font.GothamSemibold
    toast.TextColor3 = Color3.fromRGB(238,240,248)
    toast.TextScaled = true
    toast.Position = UDim2.new(0.5, -140, 1, -30)
    toast.Size = UDim2.fromOffset(280, 20)
    toast.Visible = false
    Instance.new("UITextSizeConstraint", toast).MaxTextSize = 14

    local function showToast(txt)
        toast.Text = txt
        toast.Visible = true
        toast.TextTransparency = 1
        Tween:Create(toast, TweenInfo.new(0.15), {TextTransparency = 0}):Play()
        task.delay(1.4, function()
            Tween:Create(toast, TweenInfo.new(0.2), {TextTransparency = 1}):Play()
            task.delay(0.22, function() toast.Visible = false end)
        end)
    end

    -- Eventos
    minCfg.MouseButton1Click:Connect(function()
        gui.Enabled = false
        Lib._settingsOpen = false
    end)

    closeCfg.MouseButton1Click:Connect(function()
        gui.Enabled = false
        Lib._settingsOpen = false
        Lib._settingsWasOpen = false
    end)

    tBtn.MouseButton1Click:Connect(function()
        Lib._showLauncher = not Lib._showLauncher
        paintToggle(Lib._showLauncher)
        refreshLauncherVisibility()
        saveSettings()
    end)

    keyBtn.MouseButton1Click:Connect(function()
        if Lib._capturingKey then return end
        Lib._capturingKey = true
        keyBtn.Text = "Pressione..."
        local conn
        conn = UIS.InputBegan:Connect(function(input, gpe)
            if gpe then return end
            if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode ~= Enum.KeyCode.Unknown then
                Lib._minKey = input.KeyCode
                keyBtn.Text = Lib._minKey.Name
                Lib._capturingKey = false
                saveSettings()
                if conn then conn:Disconnect() end
            end
        end)
    end)

    discBtn.MouseButton1Click:Connect(function()
        local ok = false
        do
            local success = false
            local s, why = tryCopy(Lib._discordLink)
            ok = s
            if not ok then
                -- fallback: seleciona TextBox e orienta usuário
                copyBox.Text = Lib._discordLink
                copyBox.Visible = true
                copyBox:CaptureFocus()
                copyBox.CursorPosition = #copyBox.Text + 1
                copyBox.SelectionStart = 1
                copyBox.SelectionLength = #copyBox.Text
                showToast("Pressione Ctrl+C para copiar")
                task.delay(2.0, function() copyBox.Visible = false end)
            end
        end
        if ok then showToast("Convite copiado!") end
    end)

    local function reposition()
        local screenSize = gui.AbsoluteSize
        local px, py = 100, 100
        if anchorWin and anchorWin.Parent then
            local ap = anchorWin.AbsolutePosition
            local as = anchorWin.AbsoluteSize
            px = ap.X + as.X - panel.AbsoluteSize.X - 8
            py = ap.Y + 46 + 8
        end
        px = math.clamp(px, 6, math.max(6, screenSize.X - panel.AbsoluteSize.X - 6))
        py = math.clamp(py, 6, math.max(6, screenSize.Y - panel.AbsoluteSize.Y - 6))
        panel.Position = UDim2.fromOffset(px, py)
    end
    task.defer(reposition)
    enableDrag(panel, true)

    Lib._settingsGui = gui
    return gui
end

function Lib:_toggleSettings(anchorWin)
    if Lib._settingsGui and Lib._settingsGui.Parent then
        local newState = not Lib._settingsGui.Enabled
        Lib._settingsGui.Enabled = newState
        Lib._settingsOpen = newState
        Lib._settingsWasOpen = newState
        return
    end
    local g = buildSettingsUI(anchorWin)
    g.Enabled = true
    Lib._settingsOpen = true
    Lib._settingsWasOpen = true
end

-- ===== Construção da janela principal =====
function Lib:_spawnWindow(opts)
    opts = opts or {}
    if Lib._singleMode then opts.multi = false end

    local player = Players.LocalPlayer
    local theme = merge(DEFAULT_THEME, (opts and opts.theme) or {})
    if opts and opts.size then theme.winSize = opts.size end
    if opts and opts.discord then Lib:SetDiscord(opts.discord) end

    if not (opts and opts.multi) then
        if Lib._currentGui and Lib._currentGui.Parent then
            Lib._currentGui.Enabled = true
            return Lib._currentWinObj
        end
    end

    local gui = Instance.new("ScreenGui")
    gui.Name = "SyniX_Window"
    gui.IgnoreGuiInset, gui.ResetOnSpawn = true, false
    gui.DisplayOrder = 900
    gui.Parent = player:WaitForChild("PlayerGui")

    local win = Instance.new("Frame")
    win.Name = "Window"
    win.Size = theme.winSize
    win.BackgroundColor3 = theme.bg_window
    Instance.new("UICorner", win).CornerRadius = UDim.new(0,14)
    local wS = Instance.new("UIStroke", win); wS.Color=theme.stroke; wS.Transparency=0.15
    win.Parent = gui
    enableDrag(win, true)

    -- Header
    local header = Instance.new("Frame")
    header.Parent = win
    header.BackgroundColor3 = theme.bg_header
    header.Size = UDim2.new(1, -16, 0, 46)
    header.Position = UDim2.new(0, 8, 0, 8)
    header.BorderSizePixel = 0
    Instance.new("UICorner", header).CornerRadius = UDim.new(0,10)

    local hIcon = Instance.new("ImageLabel", header)
    hIcon.BackgroundTransparency = 1
    hIcon.Image = "rbxassetid://14862323455"
    hIcon.Size = UDim2.fromOffset(22,22)
    hIcon.Position = UDim2.new(0, 10, 0.5, -11)

    local hTitle = Instance.new("TextLabel", header)
    hTitle.BackgroundTransparency = 1
    hTitle.Text = (opts and opts.title) or "SyniX Hub | Free"
    hTitle.Font = Enum.Font.GothamBold
    hTitle.TextScaled = true
    hTitle.TextXAlignment = Enum.TextXAlignment.Left
    hTitle.TextColor3 = theme.text
    hTitle.Position = UDim2.new(0, 40, 0, 4)
    hTitle.Size = UDim2.new(1, -180, 1, -8)
    Instance.new("UITextSizeConstraint", hTitle).MaxTextSize = 20

    local function mkHeadBtn(txt)
        local b = Instance.new("TextButton")
        b.BackgroundColor3 = theme.card
        b.Text = txt
        b.TextScaled = true
        b.Font = Enum.Font.GothamBold
        b.TextColor3 = theme.text
        b.AutoButtonColor = true
        Instance.new("UICorner", b).CornerRadius = UDim.new(0,8)
        Instance.new("UITextSizeConstraint", b).MaxTextSize = 16
        return b
    end
    -- Ordem: X | - | ⚙
    local btnCls = mkHeadBtn("X"); btnCls.Parent = header; btnCls.Size = UDim2.fromOffset(32,26); btnCls.Position = UDim2.new(1,-38,0.5,-13)
    local btnMin = mkHeadBtn("-"); btnMin.Parent = header; btnMin.Size = UDim2.fromOffset(32,26); btnMin.Position = UDim2.new(1,-74,0.5,-13)
    local btnCfg = mkHeadBtn("⚙"); btnCfg.Parent = header; btnCfg.Size = UDim2.fromOffset(32,26); btnCfg.Position = UDim2.new(1,-110,0.5,-13)

    -- Body
    local body = Instance.new("Frame", win)
    body.BackgroundTransparency = 1
    body.Position = UDim2.new(0, 6, 0, 60)
    body.Size = UDim2.new(1, -12, 1, -68)

    -- Sidebar
    local sidebar = Instance.new("ScrollingFrame", body)
    sidebar.Name = "Sidebar"
    sidebar.BackgroundColor3 = theme.bg_sidebar
    sidebar.Size = UDim2.new(0, theme.sidebarWidth, 1, 0)
    sidebar.Position = UDim2.new(0, 0, 0, 0)
    sidebar.ScrollBarThickness = 4
    sidebar.CanvasSize = UDim2.new(0,0,0,0)
    Instance.new("UICorner", sidebar).CornerRadius = UDim.new(0,10)
    local sbS = Instance.new("UIStroke", sidebar); sbS.Transparency = 0.85; sbS.Color = theme.stroke

    local sList = Instance.new("UIListLayout", sidebar)
    sList.Padding = UDim.new(0,4)
    sList.SortOrder = Enum.SortOrder.LayoutOrder
    sList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        sidebar.CanvasSize = UDim2.new(0,0,0, sList.AbsoluteContentSize.Y + 6)
    end)

    -- Content
    local content = Instance.new("Frame", body)
    content.BackgroundColor3 = theme.bg_panel
    content.Size = UDim2.new(1, -(theme.sidebarWidth+6), 1, 0)
    content.Position = UDim2.new(0, theme.sidebarWidth+6, 0, 0)
    Instance.new("UICorner", content).CornerRadius = UDim.new(0,10)
    local cS = Instance.new("UIStroke", content); cS.Transparency=0.85; cS.Color=theme.stroke

    local pageTitle = Instance.new("TextLabel", content)
    pageTitle.BackgroundTransparency = 1
    pageTitle.Text = "| Home"
    pageTitle.Font = Enum.Font.GothamBlack
    pageTitle.TextColor3 = theme.text
    pageTitle.TextScaled = true
    pageTitle.TextXAlignment = Enum.TextXAlignment.Left
    pageTitle.Position = UDim2.new(0, 10, 0, 8)
    pageTitle.Size = UDim2.new(1, -20, 0, 28)
    Instance.new("UITextSizeConstraint", pageTitle).MaxTextSize = 20

    -- ==== LATERAL / Abas / Widgets (mesma API de antes) ====
    local function makeSideItem(iconId, text)
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(1, 0, 0, 38)
        btn.BackgroundColor3 = theme.card
        btn.AutoButtonColor = false
        btn.Text = ""
        Instance.new("UICorner", btn).CornerRadius = UDim.new(0,8)

        local ic = Instance.new("ImageLabel", btn)
        ic.BackgroundTransparency = 1
        ic.Image = iconId or "rbxassetid://14862323455"
        ic.Size = UDim2.fromOffset(theme.sideIconSize, theme.sideIconSize)
        ic.Position = UDim2.new(0, 8, 0.5, -math.floor(theme.sideIconSize/2))
        ic.ImageColor3 = Color3.fromRGB(230,230,235)

        local lb = Instance.new("TextLabel", btn)
        lb.BackgroundTransparency = 1
        lb.Text = text
        lb.Font = Enum.Font.GothamSemibold
        lb.TextXAlignment = Enum.TextXAlignment.Left
        lb.TextColor3 = theme.text
        lb.TextScaled = true
        lb.Position = UDim2.new(0, 8 + theme.sideIconSize + 8, 0, 4)
        lb.Size = UDim2.new(1, -(8 + theme.sideIconSize + 8 + 8), 1, -8)
        Instance.new("UITextSizeConstraint", lb).MaxTextSize = 16
        return btn
    end

    local function selectSide(sideBtn)
        for _,c in ipairs(sidebar:GetChildren()) do
            if c:IsA("TextButton") then
                Tween:Create(c, TweenInfo.new(0.15), {BackgroundColor3 = theme.card}):Play()
            end
        end
        Tween:Create(sideBtn, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(50,52,62)}):Play()
    end

    local function MakeTab(def)
        local sideBtn = makeSideItem(def.icon, def.name or "Tab")
        sideBtn.Parent = sidebar

        local page = Instance.new("ScrollingFrame")
        page.BackgroundTransparency = 1
        page.Position = UDim2.new(0, 8, 0, 44)
        page.Size = UDim2.new(1, -16, 1, -54)
        page.ScrollBarThickness = 6
        page.Visible = false
        page.Parent = content
        local pageList = Instance.new("UIListLayout", page)
        pageList.Padding = UDim.new(0,8)
        pageList.SortOrder = Enum.SortOrder.LayoutOrder
        pageList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            page.CanvasSize = UDim2.new(0,0,0,pageList.AbsoluteContentSize.Y + 8)
        end)

        local function TAddSection(text)
            local s = Instance.new("TextLabel", page)
            s.BackgroundTransparency = 1
            s.Text = text
            s.Font = Enum.Font.GothamBold
            s.TextXAlignment = Enum.TextXAlignment.Left
            s.TextColor3 = theme.text
            s.TextScaled = true
            s.Size = UDim2.new(1,0,0,24)
            Instance.new("UITextSizeConstraint", s).MaxTextSize = 16
            return s
        end

        local function TAddToggle(iconId, labelText, default, callback)
            local row = Instance.new("Frame", page)
            row.Size = UDim2.new(1, 0, 0, theme.rowHeight)
            row.BackgroundColor3 = theme.row
            Instance.new("UICorner", row).CornerRadius = UDim.new(0, 8)

            local ico = Instance.new("ImageLabel", row)
            ico.BackgroundTransparency = 1
            ico.Image = iconId or "rbxassetid://14862323455"
            ico.Size = UDim2.fromOffset(18,18)
            ico.Position = UDim2.new(0, 12, 0.5, -9)
            ico.ImageColor3 = Color3.fromRGB(235,235,240)

            local label = Instance.new("TextLabel", row)
            label.BackgroundTransparency = 1
            label.Text = string.upper(labelText or "TOGGLE")
            label.Font = Enum.Font.GothamSemibold
            label.TextColor3 = theme.text
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.TextScaled = true
            label.Position = UDim2.new(0, 36, 0, 2)
            label.Size = UDim2.new(1, - (theme.toggleSize.X + 70), 1, -4)
            Instance.new("UITextSizeConstraint", label).MaxTextSize = 16

            local btn = Instance.new("TextButton", row)
            btn.Text = ""
            btn.AutoButtonColor = false
            btn.Size = UDim2.fromOffset(theme.toggleSize.X, theme.toggleSize.Y)
            btn.Position = UDim2.new(1, -(theme.toggleSize.X + 12), 0.5, -math.floor(theme.toggleSize.Y/2))
            btn.BackgroundColor3 = theme.toggle_off
            btn.ClipsDescendants = true
            Instance.new("UICorner", btn).CornerRadius = UDim.new(1,0)

            local knob = Instance.new("Frame", btn)
            knob.Size = UDim2.fromOffset(theme.knobSize.X, theme.knobSize.Y)
            knob.Position = UDim2.new(0, 2, 0.5, -math.floor(theme.knobSize.Y/2))
            knob.BackgroundColor3 = theme.knob_off
            Instance.new("UICorner", knob).CornerRadius = UDim.new(1,0)
            local kS = Instance.new("UIStroke", knob); kS.Transparency = 0.7; kS.Color = Color3.fromRGB(0,0,0)

            local offX = 2
            local onX  = math.max(2, theme.toggleSize.X - theme.knobSize.X - 2)

            local value = default and true or false
            local function paint(v)
                if v then
                    Tween:Create(btn,  TweenInfo.new(0.14), {BackgroundColor3 = theme.toggle_on}):Play()
                    Tween:Create(knob, TweenInfo.new(0.14),
                        {Position = UDim2.new(0, onX, 0.5, -math.floor(theme.knobSize.Y/2)), BackgroundColor3 = theme.knob_on}):Play()
                else
                    Tween:Create(btn,  TweenInfo.new(0.14), {BackgroundColor3 = theme.toggle_off}):Play()
                    Tween:Create(knob, TweenInfo.new(0.14),
                        {Position = UDim2.new(0, offX, 0.5, -math.floor(theme.knobSize.Y/2)), BackgroundColor3 = theme.knob_off}):Play()
                end
            end
            paint(value)

            btn.MouseButton1Click:Connect(function()
                value = not value
                paint(value)
                if callback then task.spawn(function() pcall(callback, value) end) end
            end)

            return { Set=function(v) value=v and true or false; paint(value); if callback then pcall(callback,value) end end,
                     Get=function() return value end }
        end

        local function TAddButton(iconId, text, callback)
            local row = Instance.new("TextButton", page)
            row.Text = ""
            row.Size = UDim2.new(1, 0, 0, 44)
            row.BackgroundColor3 = theme.card
            row.AutoButtonColor = true
            Instance.new("UICorner", row).CornerRadius = UDim.new(0,8)

            local ico = Instance.new("ImageLabel", row)
            ico.BackgroundTransparency = 1
            ico.Image = iconId or "rbxassetid://14862323455"
            ico.Size = UDim2.fromOffset(18,18)
            ico.Position = UDim2.new(0, 12, 0.5, -9)
            ico.ImageColor3 = Color3.fromRGB(235,235,240)

            local lbl = Instance.new("TextLabel", row)
            lbl.BackgroundTransparency = 1
            lbl.Text = text or "BUTTON"
            lbl.Font = Enum.Font.GothamBold
            lbl.TextColor3 = theme.text
            lbl.TextXAlignment = Enum.TextXAlignment.Left
            lbl.TextScaled = true
            lbl.Position = UDim2.new(0, 36, 0, 0)
            lbl.Size = UDim2.new(1, -36, 1, 0)
            Instance.new("UITextSizeConstraint", lbl).MaxTextSize = 16

            row.MouseButton1Click:Connect(function() if callback then task.spawn(callback) end end)
        end

        local function TAddDropdown(iconId, labelText, items, default, callback)
            items = items or {}
            local capH = theme.rowHeight
            local maxVisible = 8

            local row = Instance.new("Frame", page)
            row.Size = UDim2.new(1, 0, 0, capH)
            row.BackgroundColor3 = theme.row
            row.ClipsDescendants = true
            Instance.new("UICorner", row).CornerRadius = UDim.new(0, 8)

            local cap = Instance.new("Frame", row)
            cap.BackgroundTransparency = 1
            cap.Size = UDim2.new(1, 0, 0, capH)
            cap.ZIndex = 2

            local ico = Instance.new("ImageLabel", cap)
            ico.BackgroundTransparency = 1
            ico.Image = iconId or "rbxassetid://14862323455"
            ico.Size = UDim2.fromOffset(18,18)
            ico.Position = UDim2.new(0, 12, 0.5, -9)
            ico.ImageColor3 = Color3.fromRGB(235,235,240)
            ico.ZIndex = 2

            local label = Instance.new("TextLabel", cap)
            label.BackgroundTransparency = 1
            label.Text = string.upper(labelText or "DROPDOWN")
            label.Font = Enum.Font.GothamSemibold
            label.TextColor3 = theme.text
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.TextScaled = true
            label.Position = UDim2.new(0, 36, 0, 2)
            label.Size = UDim2.new(1, -180, 1, -4)
            Instance.new("UITextSizeConstraint", label).MaxTextSize = 16
            label.ZIndex = 2

            local valueText = Instance.new("TextLabel", cap)
            valueText.BackgroundTransparency = 1
            valueText.Text = tostring(default or (items[1] or ""))
            valueText.Font = Enum.Font.Gotham
            valueText.TextColor3 = theme.text
            valueText.TextXAlignment = Enum.TextXAlignment.Right
            valueText.TextScaled = true
            valueText.Position = UDim2.new(0, 0, 0, 6)
            valueText.Size = UDim2.new(1, -56, 1, -12)
            Instance.new("UITextSizeConstraint", valueText).MaxTextSize = 14
            valueText.ZIndex = 2

            local chevron = Instance.new("TextLabel", cap)
            chevron.BackgroundTransparency = 1
            chevron.Text = "▼"
            chevron.Font = Enum.Font.GothamBold
            chevron.TextColor3 = theme.text
            chevron.TextScaled = true
            chevron.Position = UDim2.new(1, -40, 0, 8)
            chevron.Size = UDim2.fromOffset(28, 28)
            Instance.new("UITextSizeConstraint", chevron).MaxTextSize = 16
            chevron.ZIndex = 2

            local opts = Instance.new("ScrollingFrame", row)
            opts.BackgroundTransparency = 1
            opts.Position = UDim2.new(0, 8, 0, capH)
            opts.Size = UDim2.new(1, -16, 0, 0)
            opts.ScrollBarThickness = 6
            opts.ClipsDescendants = true
            opts.ZIndex = 1
            opts.CanvasSize = UDim2.new(0,0,0,0)

            local optsList = Instance.new("UIListLayout", opts)
            optsList.Padding = UDim.new(0, 6)
            optsList.SortOrder = Enum.SortOrder.LayoutOrder
            optsList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                opts.CanvasSize = UDim2.new(0,0,0, optsList.AbsoluteContentSize.Y)
            end)

            local function makeOption(txt)
                local b = Instance.new("TextButton")
                b.Text = ""
                b.AutoButtonColor = true
                b.Size = UDim2.new(1, 0, 0, 32)
                b.BackgroundColor3 = theme.card
                Instance.new("UICorner", b).CornerRadius = UDim.new(0, 6)
                local l = Instance.new("TextLabel", b)
                l.BackgroundTransparency = 1
                l.Text = tostring(txt)
                l.Font = Enum.Font.Gotham
                l.TextColor3 = theme.text
                l.TextXAlignment = Enum.TextXAlignment.Left
                l.TextScaled = true
                l.Position = UDim2.new(0, 10, 0, 2)
                l.Size = UDim2.new(1, -20, 1, -4)
                Instance.new("UITextSizeConstraint", l).MaxTextSize = 14
                return b
            end

            local function heightForList()
                local count = #items
                if count == 0 then return 0 end
                local fullH = (count * 32) + ((count-1) * 6) + 8
                local maxH  = (maxVisible * 32) + ((maxVisible-1) * 6) + 8
                return math.min(fullH, maxH)
            end

            local open = false
            local function toggle(want)
                local wantOpen = (want==nil) and (not open) or want
                open = wantOpen
                chevron.Text = open and "▲" or "▼"
                local listH = open and heightForList() or 0
                Tween:Create(row,  TweenInfo.new(0.16), {Size = UDim2.new(1, 0, 0, capH + listH)}):Play()
                Tween:Create(opts, TweenInfo.new(0.16), {Size = UDim2.new(1, -16, 0, listH)}):Play()
            end

            local function populate(list)
                for _,c in ipairs(opts:GetChildren()) do
                    if c:IsA("GuiObject") then c:Destroy() end
                end
                for _,name in ipairs(list) do
                    local b = makeOption(name)
                    b.Parent = opts
                    b.MouseButton1Click:Connect(function()
                        valueText.Text = tostring(name)
                        toggle(false)
                        if callback then task.spawn(function() pcall(callback, name) end) end
                    end)
                end
                task.defer(function()
                    opts.CanvasSize = UDim2.new(0,0,0, optsList.AbsoluteContentSize.Y)
                end)
            end
            populate(items)

            local function bindToggleClick(guiObj)
                guiObj.InputBegan:Connect(function(i)
                    if i.UserInputType==Enum.UserInputType.MouseButton1 or i.UserInputType==Enum.UserInputType.Touch then
                        toggle()
                    end
                end)
            end
            bindToggleClick(cap); bindToggleClick(label); bindToggleClick(valueText); bindToggleClick(chevron); bindToggleClick(ico)

            local current = default or items[1]
            if current then valueText.Text = tostring(current) end

            return {
                Set=function(v) current=v; valueText.Text=tostring(v); if callback then pcall(callback,v) end end,
                Get=function() return current end,
                SetItems=function(newItems, newDefault)
                    items = newItems or {}
                    populate(items)
                    current = newDefault or items[1]
                    valueText.Text = tostring(current or "")
                    toggle(false)
                end,
                Open=function() toggle(true) end,
                Close=function() toggle(false) end
            }
        end

        local function openThis()
            for _,c in ipairs(content:GetChildren()) do
                if c:IsA("ScrollingFrame") then c.Visible = false end
            end
            page.Visible = true
            selectSide(sideBtn)
            pageTitle.Text = "| " .. (def.name or "Tab")
        end

        local tab = {}
        function tab:AddSection(text)  return TAddSection(text) end
        function tab:AddToggle(opt)    return TAddToggle(opt.icon, opt.text, opt.default, opt.callback) end
        function tab:AddButton(opt)    return TAddButton(opt.icon, opt.text, opt.callback) end
        function tab:AddDropdown(opt)  return TAddDropdown(opt.icon, opt.text, opt.items, opt.default, opt.callback) end

        sideBtn.MouseButton1Click:Connect(openThis)
        if not sidebar:FindFirstChild("_firstTabSelected") then
            local flag = Instance.new("BoolValue"); flag.Name = "_firstTabSelected"; flag.Parent = sidebar
            openThis()
        end

        return setmetatable(tab, {__index = tab})
    end

    -- posição inicial
    if opts and opts.multi then
        local baseX, baseY, dx, dy = 120, 80, 24, 32
        local k = (#Lib._openWindows) % 8
        local px, py = baseX + dx*k, baseY + dy*k
        local screen = win.Parent and win.Parent.AbsoluteSize or Vector2.new(1280,720)
        px = math.clamp(px, 0, math.max(0, screen.X - win.AbsoluteSize.X))
        py = math.clamp(py, 0, math.max(0, screen.Y - win.AbsoluteSize.Y))
        win.Position = UDim2.fromOffset(px, py)
    else
        win.Position = UDim2.new(0.5, -theme.winSize.X.Offset/2, 0.5, -theme.winSize.Y.Offset/2)
    end

    -- header buttons
    btnMin.MouseButton1Click:Connect(function()
        Lib:_setMainVisible(false)
    end)
    btnCls.MouseButton1Click:Connect(function()
        for i=#Lib._openWindows,1,-1 do
            local g = Lib._openWindows[i]
            if g and g.Parent then g:Destroy() end
            table.remove(Lib._openWindows, i)
        end
        Lib._currentWinObj = nil
        Lib._currentGui = nil
        destroyLauncher()
        if Lib._settingsGui and Lib._settingsGui.Parent then
            Lib._settingsGui.Enabled = false
            Lib._settingsOpen = false
            Lib._settingsWasOpen = false
        end
        gui:Destroy()
    end)
    btnCfg.MouseButton1Click:Connect(function()
        Lib:_toggleSettings(win)
    end)

    -- win obj
    local winObj = {}
    function winObj:MakeTab(o) return MakeTab(o) end
    function winObj:_getRoots() return gui, win end

    table.insert(Lib._openWindows, gui)
    gui.Destroying:Connect(function()
        for i,g in ipairs(Lib._openWindows) do
            if g == gui then table.remove(Lib._openWindows, i) break end
        end
        if Lib._currentGui == gui then
            Lib._currentGui, Lib._currentWinObj = nil, nil
        end
    end)

    if not (opts and opts.multi) then
        Lib._currentGui = gui
        Lib._currentWinObj = winObj
        Lib._lastOpts = opts
    end

    return winObj
end

-- ===== API =====
function Lib:MakeWindow(opts)
    opts = opts or {}
    if Lib._singleMode then opts.multi = false end
    Lib._launcherEnabled = not opts.noLauncher
    if opts.discord then Lib:SetDiscord(opts.discord) end
    if Lib._launcherEnabled and Lib._showLauncher ~= false then
        ensureLauncher()
    else
        destroyLauncher()
    end
    return self:_spawnWindow(opts)
end

function Lib:SetMinimizeKey(keyCode)
    if typeof(keyCode) == "EnumItem" and keyCode.EnumType == Enum.KeyCode then
        Lib._minKey = keyCode
        saveSettings()
    end
end

_G.__SyniXSingleton = setmetatable({}, Lib)
return _G.__SyniXSingleton
